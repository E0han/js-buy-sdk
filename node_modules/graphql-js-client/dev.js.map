{"version":3,"file":"dev.js","sources":["src/join.js","src/is-object.js","src/deep-freeze-copy-except.js","src/schema-for-type.js","src/variable.js","src/enum.js","src/scalar.js","src/format-input-value.js","src/format-object.js","src/format-args.js","src/format-directives.js","src/noop.js","src/profile-schema-usage.js","src/selection-set.js","src/operation.js","src/query.js","src/mutation.js","src/document.js","src/graph-model.js","src/class-registry.js","src/is-value.js","src/is-node-context.js","src/transform-connection.js","src/decode.js","src/http-fetcher.js","src/client.js","src/client-dev.js"],"sourcesContent":["export default function join(...fields) {\n  return fields.join(' ');\n}\n","export default function isObject(value) {\n  return Boolean(value) && Object.prototype.toString.call(value.valueOf()) === '[object Object]';\n}\n","import isObject from './is-object';\n\nexport default function deepFreezeCopyExcept(predicate, structure) {\n  if (predicate(structure)) {\n    return structure;\n  } else if (isObject(structure)) {\n    return Object.freeze(Object.keys(structure).reduce((copy, key) => {\n      copy[key] = deepFreezeCopyExcept(predicate, structure[key]);\n\n      return copy;\n    }, {}));\n  } else if (Array.isArray(structure)) {\n    return Object.freeze(structure.map((item) => deepFreezeCopyExcept(predicate, item)));\n  } else {\n    return structure;\n  }\n}\n","export default function schemaForType(typeBundle, typeName, typeSchema = null) {\n  const type = typeBundle.types[typeName];\n\n  if (type) {\n    return type;\n  } else if (typeSchema && typeSchema.kind === 'INTERFACE') {\n    return typeSchema;\n  }\n\n  throw new Error(`No type of ${typeName} found in schema`);\n}\n","import formatInputValue from './format-input-value';\n\nexport class VariableDefinition {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Client#variable} to create a VariableDefinition.\n   *\n   * @param {String} name The name of the variable.\n   * @param {String} type The GraphQL type of the variable.\n   * @param {*} [defaultValue] The default value of the variable.\n   */\n  constructor(name, type, defaultValue) {\n    this.name = name;\n    this.type = type;\n    this.defaultValue = defaultValue;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the variable as an input value (e.g. `$variableName`).\n   *\n   * @return {String} The GraphQL query string for the variable as an input value.\n   */\n  toInputValueString() {\n    return `$${this.name}`;\n  }\n\n  /**\n   * Returns the GraphQL query string for the variable (e.g. `$variableName:VariableType = defaultValue`).\n   *\n   * @return {String} The GraphQL query string for the variable.\n   */\n  toString() {\n    const defaultValueString = this.defaultValue ? ` = ${formatInputValue(this.defaultValue)}` : '';\n\n    return `$${this.name}:${this.type}${defaultValueString}`;\n  }\n}\n\nexport function isVariable(value) {\n  return VariableDefinition.prototype.isPrototypeOf(value);\n}\n\nexport default function variable(name, type, defaultValue) {\n  return new VariableDefinition(name, type, defaultValue);\n}\n","export class Enum {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Client#enum} to create an Enum.\n   *\n   * @param {String} key The key of the enum.\n   */\n  constructor(key) {\n    this.key = key;\n  }\n\n  /**\n   * Returns the GraphQL query string for the enum (e.g. `enumKey`).\n   *\n   * @return {String} The GraphQL query string for the enum.\n   */\n  toString() {\n    return this.key;\n  }\n\n  valueOf() {\n    return this.key.valueOf();\n  }\n}\n\nexport default (key) => {\n  return new Enum(key);\n};\n","export default class Scalar {\n  constructor(value) {\n    this.value = value;\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n  valueOf() {\n    return this.value.valueOf();\n  }\n\n  get unwrapped() {\n    return this.value;\n  }\n}\n","import formatObject from './format-object';\nimport isObject from './is-object';\nimport join from './join';\nimport {VariableDefinition} from './variable';\nimport {Enum} from './enum';\nimport Scalar from './scalar';\n\nexport default function formatInputValue(value) {\n  if (VariableDefinition.prototype.isPrototypeOf(value)) {\n    return value.toInputValueString();\n  } else if (Enum.prototype.isPrototypeOf(value)) {\n    return String(value);\n  } else if (Scalar.prototype.isPrototypeOf(value)) {\n    return JSON.stringify(value.valueOf());\n  } else if (Array.isArray(value)) {\n    return `[${join(...value.map(formatInputValue))}]`;\n  } else if (isObject(value)) {\n    return formatObject(value, '{', '}');\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","import formatInputValue from './format-input-value';\nimport join from './join';\n\nexport default function formatObject(value, openChar = '', closeChar = '') {\n  const argPairs = Object.keys(value).map((key) => {\n    return `${key}: ${formatInputValue(value[key])}`;\n  });\n\n  return `${openChar}${join(...argPairs)}${closeChar}`;\n}\n","import formatObject from './format-object';\n\nexport default function formatArgs(args) {\n  if (!Object.keys(args).length) {\n    return '';\n  }\n\n  return ` (${formatObject(args)})`;\n}\n","import formatObject from './format-object';\nimport join from './join';\n\nexport default function formatDirectives(directives) {\n  if (!Object.keys(directives).length) {\n    return '';\n  }\n\n  const directiveStrings = Object.keys(directives).map((key) => {\n    const directiveArgs = directives[key];\n    const arg = (directiveArgs && Object.keys(directiveArgs).length) ? `(${formatObject(directiveArgs)})` : '';\n\n    return `@${key}${arg}`;\n  });\n\n  return ` ${join(...directiveStrings)}`;\n}\n","// eslint-disable-next-line no-empty-function\nexport default () => {};\n","let profile = {};\nlet profiling = false;\n\nfunction trackTypeDependency(typeName) {\n  if (!profiling) {\n    return;\n  }\n\n  profile[typeName] = profile[typeName] || {};\n}\n\nfunction trackFieldDependency(typeName, fieldName) {\n  if (!profiling) {\n    return;\n  }\n\n  profile[typeName][fieldName] = true;\n}\n\nexport function resetProfiler() {\n  profile = {};\n  profiling = false;\n}\n\nexport function startProfiling() {\n  profiling = true;\n}\n\nexport function pauseProfiling() {\n  profiling = false;\n}\n\nexport function captureTypeProfile() {\n  return Object.keys(profile).sort();\n}\n\nexport function captureProfile() {\n  return Object.getOwnPropertyNames(profile).reduce((acc, typeName) => {\n    acc[typeName] = Object.getOwnPropertyNames(profile[typeName]);\n\n    return acc;\n  }, {});\n}\n\nconst Profiler = {trackTypeDependency, trackFieldDependency};\n\nexport default Profiler;\n","import deepFreezeCopyExcept from './deep-freeze-copy-except';\nimport join from './join';\nimport schemaForType from './schema-for-type';\nimport formatArgs from './format-args';\nimport formatDirectives from './format-directives';\nimport noop from './noop';\nimport {isVariable} from './variable';\nimport Profiler from './profile-schema-usage';\n\nconst {trackTypeDependency, trackFieldDependency} = Profiler;\n\nfunction parseFieldCreationArgs(creationArgs) {\n  let callback = noop;\n  let options = {};\n  let selectionSet = null;\n\n  if (creationArgs.length === 2) {\n    if (typeof creationArgs[1] === 'function') {\n      [options, callback] = creationArgs;\n    } else {\n      [options, selectionSet] = creationArgs;\n    }\n  } else if (creationArgs.length === 1) {\n    // SelectionSet is defined before this function is called since it's\n    // called by SelectionSet\n    // eslint-disable-next-line no-use-before-define\n    if (SelectionSet.prototype.isPrototypeOf(creationArgs[0])) {\n      selectionSet = creationArgs[0];\n    } else if (typeof creationArgs[0] === 'function') {\n      callback = creationArgs[0];\n    } else {\n      options = creationArgs[0];\n    }\n  }\n\n  return {options, selectionSet, callback};\n}\n\nconst emptyArgs = Object.freeze({});\nconst emptyDirectives = Object.freeze({});\n\nexport class Field {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Fields are added to a selection by {@link SelectionSetBuilder#add}, {@link SelectionSetBuilder#addConnection}\n   * and {@link SelectionSetBuilder#addInlineFragmentOn}.\n   *\n   * @param {String} name The name of the field.\n   * @param {Object} [options] An options object containing:\n   *   @param {Object} [options.args] Arguments for the field.\n   *   @param {String} [options.alias] An alias for the field.\n   *   @param {Object} [options.directives] Directives for the field.\n   * @param {SelectionSet} selectionSet The selection set on the field.\n   */\n  constructor(name, options, selectionSet) {\n    this.name = name;\n    this.alias = options.alias || null;\n    this.responseKey = this.alias || this.name;\n    this.args = (options.args ? deepFreezeCopyExcept(isVariable, options.args) : emptyArgs);\n    this.directives = (options.directives ? deepFreezeCopyExcept(isVariable, options.directives) : emptyDirectives);\n    this.selectionSet = selectionSet;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the Field (e.g. `catAlias: cat(size: 'small') { name }` or `name`).\n   *\n   * @return {String} The GraphQL query string for the Field.\n   */\n  toString() {\n    const aliasPrefix = this.alias ? `${this.alias}: ` : '';\n\n    return `${aliasPrefix}${this.name}${formatArgs(this.args)}${formatDirectives(this.directives)}${this.selectionSet}`;\n  }\n}\n\n// This is an interface that defines a usage, and simplifies type checking\nexport class Spread {}\n\nexport class InlineFragment extends Spread {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link SelectionSetBuilder#addInlineFragmentOn} to create an InlineFragment.\n   *\n   * @param {String} typeName The type of the fragment.\n   * @param {SelectionSet} selectionSet The selection set on the fragment.\n   */\n  constructor(typeName, selectionSet) {\n    super();\n    this.typeName = typeName;\n    this.selectionSet = selectionSet;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the InlineFragment (e.g. `... on Cat { name }`).\n   *\n   * @return {String} The GraphQL query string for the InlineFragment.\n   */\n  toString() {\n    return `... on ${this.typeName}${this.selectionSet}`;\n  }\n}\n\nexport class FragmentSpread extends Spread {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Document#defineFragment} to create a FragmentSpread.\n   *\n   * @param {FragmentDefinition} fragmentDefinition The corresponding fragment definition.\n   */\n  constructor(fragmentDefinition) {\n    super();\n    this.name = fragmentDefinition.name;\n    this.selectionSet = fragmentDefinition.selectionSet;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the FragmentSpread (e.g. `...catName`).\n   *\n   * @return {String} The GraphQL query string for the FragmentSpread.\n   */\n  toString() {\n    return `...${this.name}`;\n  }\n\n  toDefinition() {\n    // eslint-disable-next-line no-use-before-define\n    return new FragmentDefinition(this.name, this.selectionSet.typeSchema.name, this.selectionSet);\n  }\n}\n\nexport class FragmentDefinition {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Document#defineFragment} to create a FragmentDefinition on a {@link Document}.\n   *\n   * @param {String} name The name of the fragment definition.\n   * @param {String} typeName The type of the fragment.\n   */\n  constructor(name, typeName, selectionSet) {\n    this.name = name;\n    this.typeName = typeName;\n    this.selectionSet = selectionSet;\n    this.spread = new FragmentSpread(this);\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the FragmentDefinition (e.g. `fragment catName on Cat { name }`).\n   *\n   * @return {String} The GraphQL query string for the FragmentDefinition.\n   */\n  toString() {\n    return `fragment ${this.name} on ${this.typeName} ${this.selectionSet}`;\n  }\n}\n\nfunction selectionsHaveIdField(selections) {\n  return selections.some((fieldOrFragment) => {\n    if (Field.prototype.isPrototypeOf(fieldOrFragment)) {\n      return fieldOrFragment.name === 'id';\n    } else if (Spread.prototype.isPrototypeOf(fieldOrFragment) && fieldOrFragment.selectionSet.typeSchema.implementsNode) {\n      return selectionsHaveIdField(fieldOrFragment.selectionSet.selections);\n    }\n\n    return false;\n  });\n}\n\nfunction selectionsHaveTypenameField(selections) {\n  return selections.some((fieldOrFragment) => {\n    if (Field.prototype.isPrototypeOf(fieldOrFragment)) {\n      return fieldOrFragment.name === '__typename';\n    } else if (Spread.prototype.isPrototypeOf(fieldOrFragment) && fieldOrFragment.selectionSet.typeSchema.implementsNode) {\n      return selectionsHaveTypenameField(fieldOrFragment.selectionSet.selections);\n    }\n\n    return false;\n  });\n}\n\nfunction indexSelectionsByResponseKey(selections) {\n  function assignOrPush(obj, key, value) {\n    if (Array.isArray(obj[key])) {\n      obj[key].push(value);\n    } else {\n      obj[key] = [value];\n    }\n  }\n  const unfrozenObject = selections.reduce((acc, selection) => {\n    if (selection.responseKey) {\n      assignOrPush(acc, selection.responseKey, selection);\n    } else {\n      const responseKeys = Object.keys(selection.selectionSet.selectionsByResponseKey);\n\n      responseKeys.forEach((responseKey) => {\n        assignOrPush(acc, responseKey, selection);\n      });\n    }\n\n    return acc;\n  }, {});\n\n  Object.keys(unfrozenObject).forEach((key) => {\n    Object.freeze(unfrozenObject[key]);\n  });\n\n  return Object.freeze(unfrozenObject);\n}\n\n/**\n * Class that specifies the full selection of data to query.\n */\nexport default class SelectionSet {\n\n  /**\n   * This constructor should not be invoked directly. SelectionSets are created when building queries/mutations.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {(Object|String)} type The type of the current selection.\n   * @param {Function} builderFunction Callback function used to build the SelectionSet.\n   *   The callback takes a {@link SelectionSetBuilder} as its argument.\n   */\n  constructor(typeBundle, type, builderFunction) {\n\n    if (typeof type === 'string') {\n      this.typeSchema = schemaForType(typeBundle, type);\n    } else {\n      this.typeSchema = type;\n    }\n\n    trackTypeDependency(this.typeSchema.name);\n\n    this.typeBundle = typeBundle;\n    this.selections = [];\n    if (builderFunction) {\n      // eslint-disable-next-line no-use-before-define\n      builderFunction(new SelectionSetBuilder(this.typeBundle, this.typeSchema, this.selections));\n    }\n\n    if (this.typeSchema.implementsNode || this.typeSchema.name === 'Node') {\n      if (!selectionsHaveIdField(this.selections)) {\n        this.selections.unshift(new Field('id', {}, new SelectionSet(typeBundle, 'ID')));\n      }\n    }\n\n    if (this.typeSchema.kind === 'INTERFACE') {\n      if (!selectionsHaveTypenameField(this.selections)) {\n        this.selections.unshift(new Field('__typename', {}, new SelectionSet(typeBundle, 'String')));\n      }\n    }\n\n    this.selectionsByResponseKey = indexSelectionsByResponseKey(this.selections);\n    Object.freeze(this.selections);\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the SelectionSet (e.g. `{ cat { name } }`).\n   *\n   * @return {String} The GraphQL query string for the SelectionSet.\n   */\n  toString() {\n    if (this.typeSchema.kind === 'SCALAR' || this.typeSchema.kind === 'ENUM') {\n      return '';\n    } else {\n      return ` { ${join(this.selections)} }`;\n    }\n  }\n}\n\n/**\n * Class used to help build a {@link SelectionSet}.\n */\nclass SelectionSetBuilder {\n\n  /**\n   * This constructor should not be invoked directly. SelectionSetBuilders are created when building queries/mutations.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {Object} typeSchema The schema object for the type of the current selection.\n   * @param {Field[]} selections The fields on the current selection.\n   */\n  constructor(typeBundle, typeSchema, selections) {\n    this.typeBundle = typeBundle;\n    this.typeSchema = typeSchema;\n    this.selections = selections;\n  }\n\n  hasSelectionWithResponseKey(responseKey) {\n    return this.selections.some((field) => {\n      return field.responseKey === responseKey;\n    });\n  }\n\n  /**\n   * Adds a field to be queried on the current selection.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.add('cat', {args: {id: '123456'}, alias: 'meow'}, (cat) => {\n   *     cat.add('name');\n   *   });\n   * });\n   *\n   * @param {SelectionSet|String} selectionOrFieldName The selection or name of the field to add.\n   * @param {Object} [options] Options on the query including:\n   *   @param {Object} [options.args] Arguments on the query (e.g. `{id: '123456'}`).\n   *   @param {String} [options.alias] Alias for the field being added.\n   * @param {Function|SelectionSet} [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   */\n  add(selectionOrFieldName, ...rest) {\n    let selection;\n\n    if (Object.prototype.toString.call(selectionOrFieldName) === '[object String]') {\n      trackFieldDependency(this.typeSchema.name, selectionOrFieldName);\n\n      selection = this.field(selectionOrFieldName, ...rest);\n    } else {\n      if (Field.prototype.isPrototypeOf(selectionOrFieldName)) {\n        trackFieldDependency(this.typeSchema.name, selectionOrFieldName.name);\n      }\n\n      selection = selectionOrFieldName;\n    }\n\n    if (selection.responseKey && this.hasSelectionWithResponseKey(selection.responseKey)) {\n      throw new Error(`The field name or alias '${selection.responseKey}' has already been added.`);\n    }\n    this.selections.push(selection);\n  }\n\n  field(name, ...creationArgs) {\n    const parsedArgs = parseFieldCreationArgs(creationArgs);\n    const {options, callback} = parsedArgs;\n    let {selectionSet} = parsedArgs;\n\n    if (!selectionSet) {\n      if (!this.typeSchema.fieldBaseTypes[name]) {\n        throw new Error(`No field of name \"${name}\" found on type \"${this.typeSchema.name}\" in schema`);\n      }\n\n      const fieldBaseType = schemaForType(this.typeBundle, this.typeSchema.fieldBaseTypes[name]);\n\n      selectionSet = new SelectionSet(this.typeBundle, fieldBaseType, callback);\n    }\n\n    return new Field(name, options, selectionSet);\n  }\n\n  /**\n   * Creates an inline fragment.\n   *\n   * @access private\n   * @param {String} typeName The type  the inline fragment.\n   * @param {Function|SelectionSet}  [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   * @return {InlineFragment} An inline fragment.\n   */\n  inlineFragmentOn(typeName, builderFunctionOrSelectionSet = noop) {\n    let selectionSet;\n\n    if (SelectionSet.prototype.isPrototypeOf(builderFunctionOrSelectionSet)) {\n      selectionSet = builderFunctionOrSelectionSet;\n    } else {\n      selectionSet = new SelectionSet(\n        this.typeBundle,\n        schemaForType(this.typeBundle, typeName),\n        builderFunctionOrSelectionSet\n      );\n    }\n\n    return new InlineFragment(typeName, selectionSet);\n  }\n\n  /**\n   * Adds a field to be queried on the current selection.\n   *\n   * @access private\n   * @param {String}    name The name of the field to add to the query.\n   * @param {Object} [options] Options on the query including:\n   *   @param {Object} [options.args] Arguments on the query (e.g. `{id: '123456'}`).\n   *   @param {String} [options.alias] Alias for the field being added.\n   * @param {Function}  [callback] Callback which will be used to create a new {@link SelectionSet} for the field added.\n   */\n  addField(name, ...creationArgs) {\n    this.add(name, ...creationArgs);\n  }\n\n  /**\n   * Adds a connection to be queried on the current selection.\n   * This adds all the fields necessary for pagination.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.add('cat', (cat) => {\n   *     cat.addConnection('friends', {args: {first: 10}, alias: 'coolCats'}, (friends) => {\n   *       friends.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {String}    name The name of the connection to add to the query.\n   * @param {Object} [options] Options on the query including:\n   *   @param {Object} [options.args] Arguments on the query (e.g. `{first: 10}`).\n   *   @param {String} [options.alias] Alias for the field being added.\n   * @param {Function|SelectionSet}  [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   */\n  addConnection(name, ...creationArgs) {\n    const {options, callback, selectionSet} = parseFieldCreationArgs(creationArgs);\n\n    this.add(name, options, (connection) => {\n      connection.add('pageInfo', {}, (pageInfo) => {\n        pageInfo.add('hasNextPage');\n        pageInfo.add('hasPreviousPage');\n      });\n      connection.add('edges', {}, (edges) => {\n        edges.add('cursor');\n        edges.addField('node', {}, (selectionSet || callback)); // This is bad. Don't do this\n      });\n    });\n  }\n\n  /**\n   * Adds an inline fragment on the current selection.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.add('animal', (animal) => {\n   *     animal.addInlineFragmentOn('cat', (cat) => {\n   *       cat.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {String} typeName The name of the type of the inline fragment.\n   * @param {Function|SelectionSet}  [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   */\n  addInlineFragmentOn(typeName, fieldTypeCb = noop) {\n    this.add(this.inlineFragmentOn(typeName, fieldTypeCb));\n  }\n\n  /**\n   * Adds a fragment spread on the current selection.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.addFragment(catFragmentSpread);\n   * });\n   *\n   * @param {FragmentSpread} fragmentSpread The fragment spread to add.\n   */\n  addFragment(fragmentSpread) {\n    this.add(fragmentSpread);\n  }\n}\n","import join from './join';\nimport SelectionSet from './selection-set';\nimport schemaForType from './schema-for-type';\n\nfunction parseArgs(args) {\n  let name;\n  let variables;\n  let selectionSetCallback;\n\n  if (args.length === 3) {\n    [name, variables, selectionSetCallback] = args;\n  } else if (args.length === 2) {\n    if (Object.prototype.toString.call(args[0]) === '[object String]') {\n      name = args[0];\n      variables = null;\n    } else if (Array.isArray(args[0])) {\n      variables = args[0];\n      name = null;\n    }\n\n    selectionSetCallback = args[1];\n  } else {\n    selectionSetCallback = args[0];\n    name = null;\n  }\n\n  return {name, variables, selectionSetCallback};\n}\n\nclass VariableDefinitions {\n  constructor(variableDefinitions) {\n    this.variableDefinitions = variableDefinitions ? [...variableDefinitions] : [];\n    Object.freeze(this.variableDefinitions);\n    Object.freeze(this);\n  }\n\n  toString() {\n    if (this.variableDefinitions.length === 0) {\n      return '';\n    }\n\n    return ` (${join(this.variableDefinitions)}) `;\n  }\n}\n\n/**\n * Base class for {@link Query} and {@link Mutation}.\n * @abstract\n */\nexport default class Operation {\n\n  /**\n   * This constructor should not be invoked. The subclasses {@link Query} and {@link Mutation} should be used instead.\n   */\n  constructor(typeBundle, operationType, ...args) {\n    const {name, variables, selectionSetCallback} = parseArgs(args);\n\n    this.typeBundle = typeBundle;\n    this.name = name;\n    this.variableDefinitions = new VariableDefinitions(variables);\n    this.operationType = operationType;\n    if (operationType === 'query') {\n      this.selectionSet = new SelectionSet(typeBundle, typeBundle.queryType, selectionSetCallback);\n      this.typeSchema = schemaForType(typeBundle, typeBundle.queryType);\n    } else {\n      this.selectionSet = new SelectionSet(typeBundle, typeBundle.mutationType, selectionSetCallback);\n      this.typeSchema = schemaForType(typeBundle, typeBundle.mutationType);\n    }\n    Object.freeze(this);\n  }\n\n  /**\n   * Whether the operation is anonymous (i.e. has no name).\n   */\n  get isAnonymous() {\n    return !this.name;\n  }\n\n  /**\n   * Returns the GraphQL query or mutation string (e.g. `query myQuery { cat { name } }`).\n   *\n   * @return {String} The GraphQL query or mutation string.\n   */\n  toString() {\n    const nameString = (this.name) ? ` ${this.name}` : '';\n\n    return `${this.operationType}${nameString}${this.variableDefinitions}${this.selectionSet}`;\n  }\n}\n","import Operation from './operation';\n\n/**\n * GraphQL Query class.\n * @extends Operation\n */\nexport default class Query extends Operation {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory functions {@link Client#query} or {@link Document#addQuery} to create a Query.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {String} [name] A name for the query.\n   * @param {Object[]} [variables] A list of variables in the query. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The query builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  constructor(typeBundle, ...args) {\n    super(typeBundle, 'query', ...args);\n  }\n}\n","import Operation from './operation';\n\n/**\n * GraphQL Mutation class.\n * @extends Operation\n */\nexport default class Mutation extends Operation {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory functions {@link Client#mutation} or {@link Document#addMutation} to create a Mutation.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {String} [name] A name for the mutation.\n   * @param {Object[]} [variables] A list of variables in the mutation. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The mutation builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  constructor(typeBundle, ...args) {\n    super(typeBundle, 'mutation', ...args);\n  }\n}\n","import Query from './query';\nimport Mutation from './mutation';\nimport Operation from './operation';\nimport join from './join';\nimport SelectionSet, {FragmentDefinition} from './selection-set';\n\nfunction isAnonymous(operation) {\n  return operation.isAnonymous;\n}\n\nfunction hasAnonymousOperations(operations) {\n  return operations.some(isAnonymous);\n}\n\nfunction hasDuplicateOperationNames(operations) {\n  const names = operations.map((operation) => operation.name);\n\n  return names.reduce((hasDuplicates, name, index) => {\n    return hasDuplicates || names.indexOf(name) !== index;\n  }, false);\n}\n\nfunction extractOperation(typeBundle, operationType, ...args) {\n  if (Operation.prototype.isPrototypeOf(args[0])) {\n    return args[0];\n  }\n\n  if (operationType === 'query') {\n    return new Query(typeBundle, ...args);\n  } else {\n    return new Mutation(typeBundle, ...args);\n  }\n}\n\nfunction isInvalidOperationCombination(operations) {\n  if (operations.length === 1) {\n    return false;\n  }\n\n  return hasAnonymousOperations(operations) || hasDuplicateOperationNames(operations);\n}\n\nfunction fragmentNameIsNotUnique(existingDefinitions, name) {\n  return existingDefinitions.some((definition) => (definition.name === name));\n}\n\nexport default class Document {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Client#document} to create a Document.\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   */\n  constructor(typeBundle) {\n    this.typeBundle = typeBundle;\n    this.definitions = [];\n  }\n\n  /**\n   * Returns the GraphQL query string for the Document (e.g. `query queryOne { ... } query queryTwo { ... }`).\n   *\n   * @return {String} The GraphQL query string for the Document.\n   */\n  toString() {\n    return join(this.definitions);\n  }\n\n  /**\n   * Adds an operation to the Document.\n   *\n   * @private\n   * @param {String} operationType The type of the operation. Either 'query' or 'mutation'.\n   * @param {(Operation|String)} [query|queryName] Either an instance of an operation\n   *   object, or the name of an operation. Both are optional.\n   * @param {Object[]} [variables] A list of variables in the operation. See {@link Client#variable}.\n   * @param {Function} [callback] The query builder callback. If an operation\n   *   instance is passed, this callback will be ignored.\n   *   A {@link SelectionSet} is created using this callback.\n\n   */\n  addOperation(operationType, ...args) {\n    const operation = extractOperation(this.typeBundle, operationType, ...args);\n\n    if (isInvalidOperationCombination(this.operations.concat(operation))) {\n      throw new Error('All operations must be uniquely named on a multi-operation document');\n    }\n\n    this.definitions.push(operation);\n  }\n\n  /**\n   * Adds a query to the Document.\n   *\n   * @example\n   * document.addQuery('myQuery', (root) => {\n   *   root.add('cat', (cat) => {\n   *    cat.add('name');\n   *   });\n   * });\n   *\n   * @param {(Query|String)} [query|queryName] Either an instance of a query\n   *   object, or the name of a query. Both are optional.\n   * @param {Object[]} [variables] A list of variables in the query. See {@link Client#variable}.\n   * @param {Function} [callback] The query builder callback. If a query\n   *   instance is passed, this callback will be ignored.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  addQuery(...args) {\n    this.addOperation('query', ...args);\n  }\n\n  /**\n   * Adds a mutation to the Document.\n   *\n   * @example\n   * const input = client.variable('input', 'CatCreateInput!');\n   *\n   * document.addMutation('myMutation', [input], (root) => {\n   *   root.add('catCreate', {args: {input}}, (catCreate) => {\n   *     catCreate.add('cat', (cat) => {\n   *       cat.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {(Mutation|String)} [mutation|mutationName] Either an instance of a mutation\n   *   object, or the name of a mutation. Both are optional.\n   * @param {Object[]} [variables] A list of variables in the mutation. See {@link Client#variable}.\n   * @param {Function} [callback] The mutation builder callback. If a mutation\n   *   instance is passed, this callback will be ignored.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  addMutation(...args) {\n    this.addOperation('mutation', ...args);\n  }\n\n  /**\n   * Defines a fragment on the Document.\n   *\n   * @param {String} name The name of the fragment.\n   * @param {String} onType The type the fragment is on.\n   * @param {Function} [builderFunction] The query builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   * @return {FragmentSpread} A {@link FragmentSpread} to be used with {@link SelectionSetBuilder#addFragment}.\n   */\n  defineFragment(name, onType, builderFunction) {\n    if (fragmentNameIsNotUnique(this.fragmentDefinitions, name)) {\n      throw new Error('All fragments must be uniquely named on a multi-fragment document');\n    }\n\n    const selectionSet = new SelectionSet(this.typeBundle, onType, builderFunction);\n    const fragment = new FragmentDefinition(name, onType, selectionSet);\n\n    this.definitions.push(fragment);\n\n    return fragment.spread;\n  }\n\n  /**\n   * All operations ({@link Query} and {@link Mutation}) on the Document.\n   */\n  get operations() {\n    return this.definitions.filter((definition) => Operation.prototype.isPrototypeOf(definition));\n  }\n\n  /**\n   * All {@link FragmentDefinition}s on the Document.\n   */\n  get fragmentDefinitions() {\n    return this.definitions.filter((definition) => FragmentDefinition.prototype.isPrototypeOf(definition));\n  }\n}\n","/**\n * The base class used when deserializing response data.\n * Provides rich features, like functions to generate queries to refetch a node or fetch the next page.\n *\n * @class\n */\nexport default class GraphModel {\n\n  /**\n   * @param {Object} attrs Attributes on the GraphModel.\n   */\n  constructor(attrs) {\n    Object.defineProperty(this, 'attrs', {value: attrs, enumerable: false});\n\n    Object.keys(this.attrs).filter((key) => {\n      return !(key in this);\n    }).forEach((key) => {\n      let descriptor;\n\n      if (attrs[key] === null) {\n        descriptor = {\n          enumerable: true,\n          get() {\n            return null;\n          }\n        };\n      } else {\n        descriptor = {\n          enumerable: true,\n          get() {\n            return this.attrs[key].valueOf();\n          }\n        };\n      }\n      Object.defineProperty(this, key, descriptor);\n    });\n  }\n}\n","import GraphModel from './graph-model';\n\n/**\n * A registry of classes used to deserialize the response data. Uses {@link GraphModel} by default.\n */\nexport default class ClassRegistry {\n  constructor() {\n    this.classStore = {};\n  }\n\n  /**\n   * Registers a class for a GraphQL type in the registry.\n   *\n   * @param {Class} constructor The constructor of the class.\n   * @param {String} type The GraphQL type of the object to deserialize into the class.\n   */\n  registerClassForType(constructor, type) {\n    this.classStore[type] = constructor;\n  }\n\n  /**\n   * Unregisters a class for a GraphQL type in the registry.\n   *\n   * @param {String} type The GraphQL type to unregister.\n   */\n  unregisterClassForType(type) {\n    delete this.classStore[type];\n  }\n\n  /**\n   * Returns the class for the given GraphQL type.\n   *\n   * @param {String} type The GraphQL type to look up.\n   * @return {Class|GraphModel} The class for the given GraphQL type. Defaults to {@link GraphModel} if no class is registered for the GraphQL type.\n   */\n  classForType(type) {\n    return this.classStore[type] || GraphModel;\n  }\n}\n","export default function isValue(arg) {\n  return Object.prototype.toString.call(arg) !== '[object Null]' && Object.prototype.toString.call(arg) !== '[object Undefined]';\n}\n","export default function isNodeContext(context) {\n  return context.selection.selectionSet.typeSchema.implementsNode;\n}\n","import Document from './document';\nimport isNodeContext from './is-node-context';\nimport variable, {isVariable} from './variable';\nimport Scalar from './scalar';\nimport {FragmentSpread} from './selection-set';\n\nfunction isConnection(context) {\n  return context.selection.selectionSet.typeSchema.name.endsWith('Connection');\n}\n\nfunction nearestNode(context) {\n  if (context == null) {\n    return null;\n  } else if (isNodeContext(context)) {\n    return context;\n  } else {\n    return nearestNode(context.parent);\n  }\n}\n\nfunction contextsFromRoot(context) {\n  if (context.parent) {\n    return contextsFromRoot(context.parent).concat(context);\n  } else {\n    return [context];\n  }\n}\n\nfunction contextsFromNearestNode(context) {\n  if (context.selection.selectionSet.typeSchema.implementsNode) {\n    return [context];\n  } else {\n    return contextsFromNearestNode(context.parent).concat(context);\n  }\n}\n\nfunction initializeDocumentAndVars(currentContext, contextChain) {\n  const lastInChain = contextChain[contextChain.length - 1];\n  const first = lastInChain.selection.args.first;\n  const variableDefinitions = Object\n    .keys(lastInChain.selection.args)\n    .filter((key) => {\n      return isVariable(lastInChain.selection.args[key]);\n    })\n    .map((key) => {\n      return lastInChain.selection.args[key];\n    });\n\n  let firstVar = variableDefinitions.find((definition) => {\n    return definition.name === 'first';\n  });\n\n  if (!firstVar) {\n    if (isVariable(first)) {\n      firstVar = first;\n    } else {\n      firstVar = variable('first', 'Int', first);\n      variableDefinitions.push(firstVar);\n    }\n  }\n\n  const document = new Document(currentContext.selection.selectionSet.typeBundle);\n\n  return [document, variableDefinitions, firstVar];\n}\n\nfunction addNextFieldTo(currentSelection, contextChain, path, cursor) {\n  // There are always at least two. When we start, it's the root context, and the first set\n  const nextContext = contextChain.shift();\n\n  path.push(nextContext.selection.responseKey);\n\n  if (contextChain.length) {\n    currentSelection.add(nextContext.selection.name, {alias: nextContext.selection.alias, args: nextContext.selection.args}, (newSelection) => {\n      addNextFieldTo(newSelection, contextChain, path, cursor);\n    });\n  } else {\n    const edgesField = nextContext.selection.selectionSet.selections.find((field) => {\n      return field.name === 'edges';\n    });\n    const nodeField = edgesField.selectionSet.selections.find((field) => {\n      return field.name === 'node';\n    });\n    let first;\n\n    if (isVariable(nextContext.selection.args.first)) {\n      first = nextContext.selection.args.first;\n    } else {\n      first = variable('first', 'Int', nextContext.selection.args.first);\n    }\n\n    const options = {\n      alias: nextContext.selection.alias,\n      args: Object.assign({}, nextContext.selection.args, {after: cursor, first})\n    };\n\n    currentSelection.addConnection(nextContext.selection.name, options, nodeField.selectionSet);\n  }\n}\n\nfunction collectFragments(selections) {\n  return selections.reduce((fragmentDefinitions, field) => {\n    if (FragmentSpread.prototype.isPrototypeOf(field)) {\n      fragmentDefinitions.push(field.toDefinition());\n    }\n\n    fragmentDefinitions.push(...collectFragments(field.selectionSet.selections));\n\n    return fragmentDefinitions;\n  }, []);\n}\n\nfunction nextPageQueryAndPath(context, cursor) {\n  const nearestNodeContext = nearestNode(context);\n\n  if (nearestNodeContext) {\n    return function() {\n      const path = [];\n      const nodeType = nearestNodeContext.selection.selectionSet.typeSchema;\n      const nodeId = nearestNodeContext.responseData.id;\n      const contextChain = contextsFromNearestNode(context);\n      const [document, variableDefinitions] = initializeDocumentAndVars(context, contextChain);\n\n      document.addQuery(variableDefinitions, (root) => {\n        path.push('node');\n        root.add('node', {args: {id: nodeId}}, (node) => {\n          node.addInlineFragmentOn(nodeType.name, (fragment) => {\n            addNextFieldTo(fragment, contextChain.slice(1), path, cursor);\n          });\n        });\n      });\n\n      const fragments = collectFragments(document.operations[0].selectionSet.selections);\n\n      document.definitions.unshift(...fragments);\n\n      return [document, path];\n    };\n  } else {\n    return function() {\n      const path = [];\n      const contextChain = contextsFromRoot(context);\n      const [document, variableDefinitions] = initializeDocumentAndVars(context, contextChain);\n\n      document.addQuery(variableDefinitions, (root) => {\n        addNextFieldTo(root, contextChain.slice(1), path, cursor);\n      });\n\n      const fragments = collectFragments(document.operations[0].selectionSet.selections);\n\n      document.definitions.unshift(...fragments);\n\n      return [document, path];\n    };\n  }\n}\n\nfunction hasNextPage(connection, edge) {\n  if (edge !== connection.edges[connection.edges.length - 1]) {\n    return new Scalar(true);\n  }\n\n  return connection.pageInfo.hasNextPage;\n}\n\nfunction hasPreviousPage(connection, edge) {\n  if (edge !== connection.edges[0]) {\n    return new Scalar(true);\n  }\n\n  return connection.pageInfo.hasPreviousPage;\n}\n\nexport default function transformConnections(variableValues) {\n  return function(context, value) {\n    if (isConnection(context)) {\n      if (!(value.pageInfo && value.pageInfo.hasOwnProperty('hasNextPage') && value.pageInfo.hasOwnProperty('hasPreviousPage'))) {\n        throw new Error('Connections must include the selections \"pageInfo { hasNextPage, hasPreviousPage }\".');\n      }\n\n      return value.edges.map((edge) => {\n        return Object.assign(edge.node, {\n          nextPageQueryAndPath: nextPageQueryAndPath(context, edge.cursor),\n          hasNextPage: hasNextPage(value, edge),\n          hasPreviousPage: hasPreviousPage(value, edge),\n          variableValues\n        });\n      });\n    } else {\n      return value;\n    }\n  };\n}\n","/* eslint-disable no-warning-comments */\nimport ClassRegistry from './class-registry';\nimport {Field, Spread} from './selection-set';\nimport Query from './query';\nimport isObject from './is-object';\nimport isValue from './is-value';\nimport isNodeContext from './is-node-context';\nimport transformConnections from './transform-connection';\nimport schemaForType from './schema-for-type';\nimport Scalar from './scalar';\nimport {Enum} from './enum';\n\nclass DecodingContext {\n  constructor(selection, responseData, parent = null) {\n    this.selection = selection;\n    this.responseData = responseData;\n    this.parent = parent;\n    Object.freeze(this);\n  }\n\n  contextForObjectProperty(responseKey) {\n    const nestedSelections = this.selection.selectionSet.selectionsByResponseKey[responseKey];\n    const nextSelection = nestedSelections && nestedSelections[0];\n    let nextContext;\n\n    // fragment spreads operate inside the current context, so we recurse to get the proper\n    // selection set, but retain the current response context\n    if (Spread.prototype.isPrototypeOf(nextSelection)) {\n      nextContext = new DecodingContext(nextSelection, this.responseData, this.parent);\n    } else {\n      nextContext = new DecodingContext(nextSelection, this.responseData[responseKey], this);\n    }\n\n    if (!nextSelection) {\n      throw new Error(`Unexpected response key \"${responseKey}\", not found in selection set: ${this.selection.selectionSet}`);\n    }\n\n    if (Field.prototype.isPrototypeOf(nextSelection)) {\n      return nextContext;\n    } else {\n      return nextContext.contextForObjectProperty(responseKey);\n    }\n  }\n\n  contextForArrayItem(item) {\n    return new DecodingContext(this.selection, item, this.parent);\n  }\n}\n\nfunction decodeArrayItems(context, transformers) {\n  return context.responseData.map((item) => decodeContext(context.contextForArrayItem(item), transformers));\n}\n\nfunction decodeObjectValues(context, transformers) {\n  return Object.keys(context.responseData).reduce((acc, responseKey) => {\n    acc[responseKey] = decodeContext(context.contextForObjectProperty(responseKey), transformers);\n\n    return acc;\n  }, {});\n}\n\nfunction runTransformers(transformers, context, value) {\n  return transformers.reduce((acc, transformer) => {\n    return transformer(context, acc);\n  }, value);\n}\n\nfunction decodeContext(context, transformers) {\n  let value = context.responseData;\n\n  if (Array.isArray(value)) {\n    value = decodeArrayItems(context, transformers);\n  } else if (isObject(value)) {\n    value = decodeObjectValues(context, transformers);\n  }\n\n  return runTransformers(transformers, context, value);\n}\n\nfunction generateRefetchQueries(context, value) {\n  if (isValue(value) && isNodeContext(context)) {\n    value.refetchQuery = function() {\n      return new Query(context.selection.selectionSet.typeBundle, (root) => {\n        root.add('node', {args: {id: context.responseData.id}}, (node) => {\n          node.addInlineFragmentOn(context.selection.selectionSet.typeSchema.name, context.selection.selectionSet);\n        });\n      });\n    };\n  }\n\n  return value;\n}\n\nfunction transformPojosToClassesWithRegistry(classRegistry) {\n  return function transformPojosToClasses(context, value) {\n    if (isObject(value)) {\n      const Klass = classRegistry.classForType(context.selection.selectionSet.typeSchema.name);\n\n      return new Klass(value);\n    } else {\n      return value;\n    }\n  };\n}\n\nfunction transformScalars(context, value) {\n  if (isValue(value)) {\n    if (context.selection.selectionSet.typeSchema.kind === 'SCALAR') {\n      return new Scalar(value);\n    } else if (context.selection.selectionSet.typeSchema.kind === 'ENUM') {\n      return new Enum(value);\n    }\n  }\n\n  return value;\n}\n\nfunction recordTypeInformation(context, value) {\n  const {typeBundle, typeSchema} = context.selection.selectionSet;\n\n  if (isValue(value)) {\n    if (value.__typename) {\n      value.type = schemaForType(typeBundle, value.__typename, typeSchema);\n    } else {\n      value.type = typeSchema;\n    }\n  }\n\n  return value;\n}\n\nfunction defaultTransformers({classRegistry = new ClassRegistry(), variableValues}) {\n  return [\n    transformScalars,\n    generateRefetchQueries,\n    transformConnections(variableValues),\n    recordTypeInformation,\n    transformPojosToClassesWithRegistry(classRegistry)\n  ];\n}\n\n/**\n * A function used to decode the response data.\n *\n * @function decode\n * @param {SelectionSet} selection The selection set used to query the response data.\n * @param {Object} responseData The response data returned.\n * @param {Object} [options] Options to use when decoding including:\n *   @param {ClassRegistry} [options.classRegistry] A class registry to use when deserializing the data into classes.\n * @return {GraphModel} The decoded response data.\n */\nexport default function decode(selection, responseData, options = {}) {\n  const transformers = options.transformers || defaultTransformers(options);\n  const context = new DecodingContext(selection, responseData);\n\n  return decodeContext(context, transformers);\n}\n","export default function httpFetcher(url, options = {}) {\n  return function fetcher(graphQLParams, headers) {\n    return fetch(url, {\n      body: JSON.stringify(graphQLParams),\n      method: 'POST',\n      mode: 'cors',\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        ...options.headers,\n        ...headers\n      }\n    }).then((response) => {\n      const contentType = response.headers.get('content-type');\n\n      if (contentType.indexOf('application/json') > -1) {\n        return response.json();\n      }\n\n      return response.text().then((text) => ({text}));\n    });\n  };\n}\n","import Document from './document';\nimport Query from './query';\nimport Mutation from './mutation';\nimport Operation from './operation';\nimport decode from './decode';\nimport ClassRegistry from './class-registry';\nimport httpFetcher from './http-fetcher';\nimport enumFunction from './enum';\nimport variableFunction from './variable';\n\nexport {default as GraphModel} from './graph-model';\nexport {ClassRegistry};\nexport {default as decode} from './decode';\n\nfunction hasNextPage(paginatedModels) {\n  return paginatedModels && paginatedModels.length && paginatedModels[paginatedModels.length - 1].hasNextPage;\n}\n\n/**\n * The Client class used to create and send GraphQL documents, fragments, queries and mutations.\n */\nexport default class Client {\n\n  /**\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {Object} options An options object. Must include either `url` and optional `fetcherOptions` OR a `fetcher` function.\n   *   @param {(String|Function)} options.url|fetcher Either the URL of the GraphQL API endpoint, or a custom fetcher function for further customization.\n   *   @param {Object} [options.fetcherOptions] Additional options to use with `fetch`, like headers. Do not specify this argument if `fetcher` is specified.\n   *   @param {ClassRegistry} [options.registry=new ClassRegistry()] A {@link ClassRegistry} used to decode the response data.\n   */\n  constructor(typeBundle, {url, fetcherOptions, fetcher, registry = new ClassRegistry()}) {\n    this.typeBundle = typeBundle;\n    this.classRegistry = registry;\n\n    if (url && fetcher) {\n      throw new Error('Arguments not supported: supply either `url` and optional `fetcherOptions` OR use a `fetcher` function for further customization.');\n    }\n\n    if (url) {\n      this.fetcher = httpFetcher(url, fetcherOptions);\n    } else if (fetcher) {\n      if (fetcherOptions) {\n        throw new Error('Arguments not supported: when specifying your own `fetcher`, set options through it and not with `fetcherOptions`');\n      }\n\n      this.fetcher = fetcher;\n    } else {\n      throw new Error('Invalid arguments: one of `url` or `fetcher` is needed.');\n    }\n  }\n\n  /**\n   * Creates a GraphQL document.\n   *\n   * @example\n   * const document = client.document();\n   *\n   * @return {Document} A GraphQL document.\n   */\n  document() {\n    return new Document(this.typeBundle);\n  }\n\n  /**\n   * Creates a GraphQL query.\n   *\n   * @example\n   * const query = client.query('myQuery', (root) => {\n   *   root.add('cat', (cat) => {\n   *    cat.add('name');\n   *   });\n   * });\n   *\n   * @param {String} [name] A name for the query.\n   * @param {VariableDefinition[]} [variables] A list of variables in the query. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The query builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   * @return {Query} A GraphQL query.\n   */\n  query(...args) {\n    return new Query(this.typeBundle, ...args);\n  }\n\n  /**\n   * Creates a GraphQL mutation.\n   *\n   * @example\n   * const input = client.variable('input', 'CatCreateInput!');\n   *\n   * const mutation = client.mutation('myMutation', [input], (root) => {\n   *   root.add('catCreate', {args: {input}}, (catCreate) => {\n   *     catCreate.add('cat', (cat) => {\n   *       cat.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {String} [name] A name for the mutation.\n   * @param {VariableDefinition[]} [variables] A list of variables in the mutation. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The mutation builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   * @return {Mutation} A GraphQL mutation.\n   */\n  mutation(...args) {\n    return new Mutation(this.typeBundle, ...args);\n  }\n\n  /**\n   * Sends a GraphQL operation (query or mutation) or a document.\n   *\n   * @example\n   * client.send(query, {id: '12345'}).then((result) => {\n   *   // Do something with the returned result\n   *   console.log(result);\n   * });\n   *\n   * @param {(Query|Mutation|Document|Function)} request The operation or document to send. If represented\n   * as a function, it must return `Query`, `Mutation`, or `Document` and recieve the client as the only param.\n   * @param {Object} [variableValues] The values for variables in the operation or document.\n   * @param {Object} [otherProperties] Other properties to send with the query. For example, a custom operation name.\n   * @param {Object} [headers] Additional headers to be applied on a request by request basis.\n   * @return {Promise.<Object>} A promise resolving to an object containing the response data.\n   */\n  send(request, variableValues = null, otherProperties = null, headers = null) {\n    let operationOrDocument;\n\n    if (Function.prototype.isPrototypeOf(request)) {\n      operationOrDocument = request(this);\n    } else {\n      operationOrDocument = request;\n    }\n\n    const graphQLParams = {query: operationOrDocument.toString()};\n\n    if (variableValues) {\n      graphQLParams.variables = variableValues;\n    }\n\n    Object.assign(graphQLParams, otherProperties);\n\n    let operation;\n\n    if (Operation.prototype.isPrototypeOf(operationOrDocument)) {\n      operation = operationOrDocument;\n    } else {\n      const document = operationOrDocument;\n\n      if (document.operations.length === 1) {\n        operation = document.operations[0];\n      } else if (otherProperties.operationName) {\n        operation = document.operations.find((documentOperation) => documentOperation.name === otherProperties.operationName);\n      } else {\n        throw new Error(`\n          A document must contain exactly one operation, or an operationName\n          must be specified. Example:\n\n            client.send(document, null, {operationName: 'myFancyQuery'});\n        `);\n      }\n    }\n\n    return this.fetcher(graphQLParams, headers).then((response) => {\n      if (response.data) {\n        response.model = decode(operation, response.data, {\n          classRegistry: this.classRegistry,\n          variableValues\n        });\n      }\n\n      return response;\n    });\n  }\n\n  /**\n   * Fetches the next page of a paginated node or array of nodes.\n   *\n   * @example\n   * client.fetchNextPage(node, {first: 10}).then((result) => {\n   *   // Do something with the next page\n   *   console.log(result);\n   * });\n   *\n   * @param {(GraphModel|GraphModel[])} nodeOrNodes The node or list of nodes on which to fetch the next page.\n   * @param {Object} [options] Options object containing:\n   *   @param {Integer} [options.first] The number of nodes to query on the next page. Defaults to the page size of the previous query.\n   * @return {Promise.<GraphModel[]>} A promise resolving with the next page of {@link GraphModel}s.\n   */\n  fetchNextPage(nodeOrNodes, options) {\n    let node;\n\n    if (Array.isArray(nodeOrNodes)) {\n      node = nodeOrNodes[nodeOrNodes.length - 1];\n    } else {\n      node = nodeOrNodes;\n    }\n\n    const [query, path] = node.nextPageQueryAndPath();\n    let variableValues;\n\n    if (node.variableValues || options) {\n      variableValues = Object.assign({}, node.variableValues, options);\n    }\n\n    return this.send(query, variableValues).then((response) => {\n      response.model = path.reduce((object, key) => {\n        return object[key];\n      }, response.model);\n\n      return response;\n    });\n  }\n\n  /**\n   * Fetches all subsequent pages of a paginated array of nodes.\n   *\n   * @example\n   * client.fetchAllPages(nodes, {pageSize: 20}).then((result) => {\n   *   // Do something with all the models\n   *   console.log(result);\n   * });\n   *\n   * @param {GraphModel[]} paginatedModels The list of nodes on which to fetch all pages.\n   * @param {Object} options Options object containing:\n   *   @param {Integer} options.pageSize The number of nodes to query on each page.\n   * @return {Promise.<GraphModel[]>} A promise resolving with all pages of {@link GraphModel}s, including the original list.\n   */\n  fetchAllPages(paginatedModels, {pageSize}) {\n    if (hasNextPage(paginatedModels)) {\n      return this.fetchNextPage(paginatedModels, {first: pageSize}).then(({model}) => {\n        const pages = paginatedModels.concat(model);\n\n        return this.fetchAllPages(pages, {pageSize});\n      });\n    }\n\n    return Promise.resolve(paginatedModels);\n  }\n\n  /**\n   * Refetches a {@link GraphModel} whose type implements `Node`.\n   *\n   * @example\n   * client.refetch(node).then((result) => {\n   *   // Do something with the refetched node\n   *   console.log(result);\n   * });\n   *\n   * @param {GraphModel} nodeType A {@link GraphModel} whose type implements `Node`.\n   * @return {Promise.<GraphModel>} The refetched {@link GraphModel}.\n   */\n  refetch(nodeType) {\n    if (!nodeType) {\n      throw new Error('\\'client#refetch\\' must be called with a non-null instance of a Node.');\n    } else if (!nodeType.type.implementsNode) {\n      throw new Error(`'client#refetch' must be called with a type that implements Node. Received ${nodeType.type.name}.`);\n    }\n\n    return this.send(nodeType.refetchQuery()).then(({model}) => model.node);\n  }\n\n  /**\n   * Creates a variable to be used in a {@link Query} or {@link Mutation}.\n   *\n   * @example\n   * const idVariable = client.variable('id', 'ID!', '12345');\n   *\n   * @param {String} name The name of the variable.\n   * @param {String} type The GraphQL type of the variable.\n   * @param {*} [defaultValue] The default value of the variable.\n   * @return {VariableDefinition} A variable object that can be used in a {@link Query} or {@link Mutation}.\n   */\n  variable(name, type, defaultValue) {\n    return variableFunction(name, type, defaultValue);\n  }\n\n  /**\n   * Creates an enum to be used in a {@link Query} or {@link Mutation}.\n   *\n   * @example\n   * const titleEnum = client.enum('TITLE');\n   *\n   * @param {String} key The key of the enum.\n   * @return {Enum} An enum object that can be used in a {@link Query} or {@link Mutation}.\n   */\n  enum(key) {\n    return enumFunction(key);\n  }\n}\n","import Client from './client';\nimport {resetProfiler, startProfiling, pauseProfiling, captureTypeProfile, captureProfile} from './profile-schema-usage';\n\nexport {default as GraphModel} from './graph-model';\nexport {default as ClassRegistry} from './class-registry';\nexport {default as decode} from './decode';\n\nObject.assign(Client, {\n  resetProfiler,\n  startProfiling,\n  pauseProfiling,\n  captureTypeProfile,\n  captureProfile\n});\n\nexport default Client;\n"],"names":["join","fields","isObject","value","Boolean","Object","prototype","toString","call","valueOf","deepFreezeCopyExcept","predicate","structure","freeze","keys","reduce","copy","key","Array","isArray","map","item","schemaForType","typeBundle","typeName","typeSchema","type","types","kind","Error","VariableDefinition","name","defaultValue","defaultValueString","formatInputValue","isVariable","isPrototypeOf","variable","Enum","Scalar","toInputValueString","String","JSON","stringify","formatObject","openChar","closeChar","argPairs","formatArgs","args","length","formatDirectives","directives","directiveStrings","directiveArgs","arg","profile","profiling","trackTypeDependency","trackFieldDependency","fieldName","resetProfiler","startProfiling","pauseProfiling","captureTypeProfile","sort","captureProfile","getOwnPropertyNames","acc","Profiler","parseFieldCreationArgs","creationArgs","callback","noop","options","selectionSet","SelectionSet","emptyArgs","emptyDirectives","Field","alias","responseKey","aliasPrefix","Spread","InlineFragment","FragmentSpread","fragmentDefinition","FragmentDefinition","spread","selectionsHaveIdField","selections","some","fieldOrFragment","implementsNode","selectionsHaveTypenameField","indexSelectionsByResponseKey","assignOrPush","obj","push","unfrozenObject","selection","responseKeys","selectionsByResponseKey","forEach","builderFunction","SelectionSetBuilder","unshift","field","selectionOrFieldName","rest","hasSelectionWithResponseKey","parsedArgs","fieldBaseTypes","fieldBaseType","builderFunctionOrSelectionSet","add","connection","pageInfo","edges","addField","fieldTypeCb","inlineFragmentOn","fragmentSpread","parseArgs","variables","selectionSetCallback","VariableDefinitions","variableDefinitions","Operation","operationType","queryType","mutationType","nameString","Query","Mutation","isAnonymous","operation","hasAnonymousOperations","operations","hasDuplicateOperationNames","names","hasDuplicates","index","indexOf","extractOperation","isInvalidOperationCombination","fragmentNameIsNotUnique","existingDefinitions","definition","Document","definitions","concat","addOperation","onType","fragmentDefinitions","fragment","filter","GraphModel","attrs","defineProperty","enumerable","descriptor","ClassRegistry","classStore","constructor","isValue","isNodeContext","context","isConnection","endsWith","nearestNode","parent","contextsFromRoot","contextsFromNearestNode","initializeDocumentAndVars","currentContext","contextChain","lastInChain","first","firstVar","find","document","addNextFieldTo","currentSelection","path","cursor","nextContext","shift","newSelection","edgesField","nodeField","assign","after","addConnection","collectFragments","toDefinition","nextPageQueryAndPath","nearestNodeContext","nodeType","nodeId","responseData","id","addQuery","root","node","addInlineFragmentOn","slice","fragments","hasNextPage","edge","hasPreviousPage","transformConnections","variableValues","hasOwnProperty","DecodingContext","nestedSelections","nextSelection","contextForObjectProperty","decodeArrayItems","transformers","decodeContext","contextForArrayItem","decodeObjectValues","runTransformers","transformer","generateRefetchQueries","refetchQuery","transformPojosToClassesWithRegistry","classRegistry","transformPojosToClasses","Klass","classForType","transformScalars","recordTypeInformation","__typename","defaultTransformers","decode","httpFetcher","url","fetcher","graphQLParams","headers","fetch","then","response","contentType","get","json","text","paginatedModels","Client","fetcherOptions","registry","request","otherProperties","operationOrDocument","Function","query","operationName","documentOperation","data","model","nodeOrNodes","send","object","pageSize","fetchNextPage","pages","fetchAllPages","Promise","resolve","variableFunction","enumFunction"],"mappings":"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"}