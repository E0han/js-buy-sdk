'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handlebars = require('handlebars');

var _handlebars2 = _interopRequireDefault(_handlebars);

var _jsStringEscape = require('js-string-escape');

var _jsStringEscape2 = _interopRequireDefault(_jsStringEscape);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolveTemplate = require('./resolve-template');

var _resolveTemplate2 = _interopRequireDefault(_resolveTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isLintOk(opts, results) {
  if (opts.maxWarnings === -1) {
    return results.errorCount === 0;
  }

  return results.errorCount === 0 && results.warningCount <= opts.maxWarnings;
}

exports.default = function (opts, results) {
  var handleBarsData = {
    results: results.map(function (lintResult) {
      var file = _path2.default.relative(process.cwd(), lintResult.filePath);
      var lintOK = isLintOk(opts, lintResult);
      var message = void 0;

      if (lintOK) {
        message = file + ' should pass lint.';
      } else {
        message = file + ' should pass lint.\\n' + (0, _jsStringEscape2.default)(renderErrors(lintResult.messages));
      }

      return { file: file, lintOK: lintOK, message: message };
    })
  };

  var template = _handlebars2.default.compile((0, _resolveTemplate2.default)(opts));

  return template(handleBarsData);
};

function renderErrors(errors) {
  if (!errors) {
    return '';
  }

  return errors.map(function (error) {
    return error.line + ':' + error.column + ' - ' + error.message + ' ' + (error.ruleId !== null ? error.ruleId : '');
  }).join('\n');
}