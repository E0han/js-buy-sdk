'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.suites = undefined;

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _eslint = require('eslint');

var eslint = _interopRequireWildcard(_eslint);

var _generateTests = require('./generate-tests');

var _generateTests2 = _interopRequireDefault(_generateTests);

var _suites = require('./suites');

var _suites2 = _interopRequireDefault(_suites);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CLIEngine = eslint.CLIEngine;

exports.default = function (opts) {

  if (!opts) {
    throw new Error('Please pass in an options object');
  }

  if (!opts.template) {
    throw new Error('Your options object should define `template` which could be one of the following values\n' + (Object.keys(_suites2.default).map(function (suiteName) {
      return '- ' + suiteName;
    }).join('\n') + '\n') + 'Or it should be a handlebars template which defines and sets up your tests (see README.md)\n\n');
  }

  var options = Object.assign({
    optsEslint: null,
    maxWarnings: -1
  }, opts);

  // the following will get an array of all paths to lint
  var paths = getPaths(options);

  // now we want to run eslint  on all those paths we can assume that
  // an eslint config is setup
  var eslintEngine = new CLIEngine(opts.optsEslint);
  var results = eslintEngine.executeOnFiles(paths).results;

  // now that we have results we want to JS some JS and return it
  return (0, _generateTests2.default)(options, results);
};

function getPaths(opts) {
  var paths = opts.paths;

  if (!Array.isArray(paths)) {
    paths = [paths];
  }

  return paths.reduce(function (allPaths, path) {
    var newPaths = _glob2.default.sync(path);

    return allPaths.concat(newPaths);
  }, []);
}

exports.suites = _suites2.default;