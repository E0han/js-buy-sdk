/*
The MIT License (MIT)
Copyright (c) 2016 Shopify Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.


Version: 0.2.0 Commit: 447caf7
*/
import { readFile } from 'fs';
import { resolve } from 'path';
import { createFilter } from 'rollup-pluginutils';
import { compileOptimizedSchemaIDL, compileOptimizedSchemaJson, compileSchemaIDL, compileSchemaJson, compileToModule, fragmentFilesForDocument } from 'graphql-js-client-compiler';
import glob from 'glob';

function hasGraphQLExtension(id) {
  return Boolean(id.match(/\.graphql$/i));
}

function isJson(source) {
  try {
    JSON.parse(source);

    return true;
  } catch (_) {
    return false;
  }
}

function globPaths(paths) {
  return Promise.all(paths.map(path$$1 => {
    return new Promise((resolve$$1, reject) => {
      glob(resolve(path$$1), (error, files) => {
        if (error) {
          reject(error);
        } else {
          resolve$$1(files);
        }
      });
    });
  })).then(globResults => {
    return globResults.reduce((results, currentGlob) => {
      return results.concat(currentGlob);
    }, []);
  });
}

function readFiles(files) {
  return Promise.all(files.map(file => {
    return new Promise((resolve$$1, reject) => {
      readFile(file, (error, data) => {
        if (error) {
          reject(error);
        } else {
          resolve$$1({
            body: data.toString(),
            path: file
          });
        }
      });
    });
  }));
}

function optimizeAndCompileSchema({ schema, profileDocuments, compiler }) {
  return globPaths(profileDocuments).then(files => {
    return readFiles(files);
  }).then(documents => {
    return Promise.all(documents.map(document => {
      return prependFragments(document.body, document.path);
    }));
  }).then(concatenatedDocuments => {
    return compiler(schema, { documents: concatenatedDocuments });
  });
}

function prependFragments(source, id) {
  return recursivelySourceFragmentFiles(source, id).then(fragments => {
    return source.concat(fragments.map(fragment => fragment.body).join('\n'));
  });
}

function recursivelySourceFragmentFiles(source, id, depth = 0) {
  if (depth > 100) {
    throw new Error(`Max fragment depth exceeded. Fragments can not link to each other more than 100 deep.
This may indicated a circular reference.`);
  }

  const fragmentFiles = fragmentFilesForDocument(id, source);

  if (fragmentFiles.length === 0) {
    return Promise.resolve([]);
  }

  return readFiles(fragmentFiles).then(fragments => {
    return Promise.all(fragments.map(fragment => {
      return recursivelySourceFragmentFiles(fragment.body, fragment.path, depth + 1);
    }).concat(Promise.resolve(fragments)));
  }).then(fragmentLists => {
    return fragmentLists.reduce((acc, fragments) => {
      return acc.concat(fragments);
    }, []);
  }).then(fragments => {
    return fragments.reduce((acc, fragment) => {
      if (!acc.find(uniqueFragment => uniqueFragment.path === fragment.path)) {
        acc.push(fragment);
      }

      return acc;
    }, []);
  });
}

function plugin({ schema, optimize, profileDocuments, include, exclude } = {}) {
  const filter = createFilter(include, exclude);
  const schemaPath = resolve(schema || '');

  function isSchema(id) {
    if (!schema || id !== schemaPath) {
      return false;
    }

    return true;
  }

  return {
    name: 'graphql-js-client-compiler',
    transform(source, id) {
      if (!filter(id)) {
        return;
      }

      function compile() {
        if (isSchema(id)) {
          if (optimize) {
            const opts = {
              schema: source,
              profileDocuments
            };

            if (isJson(source)) {
              opts.compiler = compileOptimizedSchemaJson;
            } else {
              opts.compiler = compileOptimizedSchemaIDL;
            }

            return optimizeAndCompileSchema(opts);
          } else if (isJson(source)) {
            return compileSchemaJson(source);
          } else {
            return compileSchemaIDL(source);
          }
        } else if (hasGraphQLExtension(id)) {
          return prependFragments(source, id).then(concatenatedSource => {
            return compileToModule(concatenatedSource);
          });
        }
      }

      const promise = compile();

      if (promise) {
        return promise.then(code => {
          return {
            code,
            map: { mappings: '' }
          };
        });
      }
    }
  };
}

export default plugin;
//# sourceMappingURL=index.es.js.map
