{"version":3,"file":"index.js","sources":["src/index.js"],"sourcesContent":["import {readFile} from 'fs';\nimport {resolve as resolvePath} from 'path';\nimport {createFilter} from 'rollup-pluginutils';\nimport {\n  compileToModule,\n  compileSchemaJson,\n  compileSchemaIDL,\n  compileOptimizedSchemaJson,\n  compileOptimizedSchemaIDL,\n  fragmentFilesForDocument\n} from 'graphql-js-client-compiler';\nimport glob from 'glob';\n\nfunction hasGraphQLExtension(id) {\n  return Boolean(id.match(/\\.graphql$/i));\n}\n\nfunction isJson(source) {\n  try {\n    JSON.parse(source);\n\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction globPaths(paths) {\n  return Promise.all(paths.map((path) => {\n    return new Promise((resolve, reject) => {\n      glob(resolvePath(path), (error, files) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(files);\n        }\n      });\n    });\n  })).then((globResults) => {\n    return globResults.reduce((results, currentGlob) => {\n      return results.concat(currentGlob);\n    }, []);\n  });\n}\n\nfunction readFiles(files) {\n  return Promise.all(files.map((file) => {\n    return new Promise((resolve, reject) => {\n      readFile(file, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve({\n            body: data.toString(),\n            path: file\n          });\n        }\n      });\n    });\n  }));\n}\n\nfunction optimizeAndCompileSchema({schema, profileDocuments, compiler}) {\n  return globPaths(profileDocuments).then((files) => {\n    return readFiles(files);\n  }).then((documents) => {\n    return Promise.all(documents.map((document) => {\n      return prependFragments(document.body, document.path);\n    }));\n  }).then((concatenatedDocuments) => {\n    return compiler(schema, {documents: concatenatedDocuments});\n  });\n}\n\nfunction prependFragments(source, id) {\n  return recursivelySourceFragmentFiles(source, id).then((fragments) => {\n    return source.concat(fragments.map((fragment) => fragment.body).join('\\n'));\n  });\n}\n\nfunction recursivelySourceFragmentFiles(source, id, depth = 0) {\n  if (depth > 100) {\n    throw new Error(`Max fragment depth exceeded. Fragments can not link to each other more than 100 deep.\nThis may indicated a circular reference.`);\n  }\n\n  const fragmentFiles = fragmentFilesForDocument(id, source);\n\n  if (fragmentFiles.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  return readFiles(fragmentFiles).then((fragments) => {\n    return Promise.all(fragments.map((fragment) => {\n      return recursivelySourceFragmentFiles(fragment.body, fragment.path, depth + 1);\n    }).concat(Promise.resolve(fragments)));\n  }).then((fragmentLists) => {\n    return fragmentLists.reduce((acc, fragments) => {\n      return acc.concat(fragments);\n    }, []);\n  }).then((fragments) => {\n    return fragments.reduce((acc, fragment) => {\n      if (!acc.find((uniqueFragment) => uniqueFragment.path === fragment.path)) {\n        acc.push(fragment);\n      }\n\n      return acc;\n    }, []);\n  });\n}\n\nexport default function plugin({schema, optimize, profileDocuments, include, exclude} = {}) {\n  const filter = createFilter(include, exclude);\n  const schemaPath = resolvePath(schema || '');\n\n  function isSchema(id) {\n    if (!schema || id !== schemaPath) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return {\n    name: 'graphql-js-client-compiler',\n    transform(source, id) {\n      if (!filter(id)) {\n        return;\n      }\n\n      function compile() {\n        if (isSchema(id)) {\n          if (optimize) {\n            const opts = {\n              schema: source,\n              profileDocuments\n            };\n\n            if (isJson(source)) {\n              opts.compiler = compileOptimizedSchemaJson;\n            } else {\n              opts.compiler = compileOptimizedSchemaIDL;\n            }\n\n            return optimizeAndCompileSchema(opts);\n          } else if (isJson(source)) {\n            return compileSchemaJson(source);\n          } else {\n            return compileSchemaIDL(source);\n          }\n        } else if (hasGraphQLExtension(id)) {\n          return prependFragments(source, id).then((concatenatedSource) => {\n            return compileToModule(concatenatedSource);\n          });\n        }\n      }\n\n      const promise = compile();\n\n      if (promise) {\n        return promise.then((code) => {\n          return {\n            code,\n            map: {mappings: ''}\n          };\n        });\n      }\n    }\n  };\n}\n"],"names":["hasGraphQLExtension","id","Boolean","match","isJson","source","parse","_","globPaths","paths","Promise","all","map","path","resolve","reject","resolvePath","error","files","then","globResults","reduce","results","currentGlob","concat","readFiles","file","data","toString","optimizeAndCompileSchema","schema","profileDocuments","compiler","documents","document","prependFragments","body","concatenatedDocuments","recursivelySourceFragmentFiles","fragments","fragment","join","depth","Error","fragmentFiles","fragmentFilesForDocument","length","fragmentLists","acc","find","uniqueFragment","push","plugin","optimize","include","exclude","filter","createFilter","schemaPath","isSchema","compile","opts","compileOptimizedSchemaJson","compileOptimizedSchemaIDL","compileSchemaJson","compileSchemaIDL","concatenatedSource","compileToModule","promise","code","mappings"],"mappings":"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"}