{"version":3,"file":"index.es.js","sources":["src/query-compilers.js","src/profilers.js","src/schema-compilers.js","src/find-undefined-fragments.js","src/fragment-files-for-document.js"],"sourcesContent":["import * as t from 'babel-types';\nimport generate from 'babel-generator';\nimport {transformToAst} from 'graphql-to-js-client-builder';\n\nfunction baseAst(graphQlCode) {\n  const clientVar = 'client';\n  const documentVar = 'document';\n  const spreadsVar = 'spreads';\n  const variablesVar = 'variables';\n\n  return t.functionDeclaration(\n    t.identifier('query'),\n    [t.identifier(clientVar)],\n    t.blockStatement(\n      transformToAst(graphQlCode, {\n        clientVar,\n        documentVar,\n        spreadsVar,\n        variablesVar\n      }).concat(\n        t.returnStatement(t.identifier(documentVar))\n      )\n    )\n  );\n\n}\n\nexport function compileToFunction(graphQlCode) {\n  const ast = baseAst(graphQlCode);\n\n  return `${generate(t.program([ast])).code}\\n`;\n}\n\nexport function compileToModule(graphQlCode) {\n  const ast = t.exportDefaultDeclaration(baseAst(graphQlCode));\n\n  return `${generate(t.program([ast])).code}\\n`;\n}\n","import Module from 'module';\nimport Client from 'graphql-js-client/dev';\nimport {compileToFunction} from './query-compilers';\n\nexport function profileQuery(query, types) {\n  return profileQueries([query], types);\n}\n\nexport function profileQueries(queries, types) {\n  const client = new Client(types, {url: 'https://not-an-api.com'});\n\n  const functions = queries.map((query) => {\n    const code = compileToFunction(query);\n    const virtualModule = new Module();\n\n    virtualModule._compile(`module.exports = ${code}`, '');\n\n    return virtualModule.exports;\n  });\n\n  Client.resetProfiler();\n  Client.startProfiling();\n\n  functions.forEach((func) => {\n    func(client);\n  });\n\n  Client.pauseProfiling();\n\n  return Client.captureProfile();\n}\n","import Module from 'module';\nimport {generateSchemaBundle} from 'graphql-js-schema';\nimport {graphql, buildSchema} from 'graphql';\nimport {introspectionQuery} from 'graphql/utilities';\nimport {profileQueries} from './profilers';\n\nfunction schemaIDLToJson(schemaIDL) {\n  const schema = buildSchema(schemaIDL);\n\n  return graphql(schema, introspectionQuery);\n}\n\nexport function compileSchemaJson(schemaJson, {profile = null} = {}) {\n  let schema;\n\n  if (typeof schemaJson === 'string') {\n    schema = JSON.parse(schemaJson);\n  } else {\n    schema = schemaJson;\n  }\n\n  return generateSchemaBundle(schema, 'Types', profile).then((bundle) => {\n    return bundle.body;\n  });\n}\n\nexport function compileSchemaIDL(schemaIDL, {profile = null} = {}) {\n  return schemaIDLToJson(schemaIDL).then((schemaJson) => {\n    return compileSchemaJson(schemaJson, {profile});\n  });\n}\n\nexport function compileOptimizedSchemaJson(schemaJson, {documents}) {\n  return compileSchemaJson(schemaJson).then((typesCode) => {\n    const typesCjsCode = typesCode.replace('export default', 'module.exports =');\n    const typesModule = new Module();\n\n    typesModule._compile(typesCjsCode, '');\n\n    const types = typesModule.exports;\n    const profile = profileQueries(documents, types);\n\n    return compileSchemaJson(schemaJson, {profile});\n  });\n}\n\nexport function compileOptimizedSchemaIDL(schemaIDL, {documents}) {\n  return schemaIDLToJson(schemaIDL).then((schemaJson) => {\n    return compileOptimizedSchemaJson(schemaJson, {documents});\n  });\n}\n","import {parse, visit} from 'graphql/language';\n\nexport default function findUndefinedFragments(document) {\n  const definitionNames = [];\n  const spreadNames = [];\n\n  visit(parse(document), {\n    FragmentDefinition(nodes) {\n      definitionNames.push(nodes.name.value);\n    },\n    FragmentSpread(nodes) {\n      spreadNames.push(nodes.name.value);\n    }\n  });\n\n  return spreadNames.filter((name) => {\n    return !definitionNames.includes(name);\n  });\n}\n","import {dirname, join} from 'path';\nimport findUndefinedFragments from './find-undefined-fragments';\n\nexport default function fragmentFilesForDocument(documentPath, document) {\n  const undefinedFragments = findUndefinedFragments(document);\n  const workingDirectory = dirname(documentPath);\n\n  return undefinedFragments.map((fragmentName) => {\n    return join(workingDirectory, `${fragmentName}.graphql`);\n  });\n}\n"],"names":["baseAst","graphQlCode","clientVar","documentVar","spreadsVar","variablesVar","t","transformToAst","concat","compileToFunction","ast","generate","code","compileToModule","profileQuery","query","types","profileQueries","queries","client","Client","url","functions","map","virtualModule","Module","_compile","exports","resetProfiler","startProfiling","forEach","func","pauseProfiling","captureProfile","schemaIDLToJson","schemaIDL","schema","buildSchema","graphql","introspectionQuery","compileSchemaJson","schemaJson","profile","JSON","parse","generateSchemaBundle","then","bundle","body","compileSchemaIDL","compileOptimizedSchemaJson","documents","typesCode","typesCjsCode","replace","typesModule","compileOptimizedSchemaIDL","findUndefinedFragments","document","definitionNames","spreadNames","nodes","push","name","value","filter","includes","fragmentFilesForDocument","documentPath","undefinedFragments","workingDirectory","dirname","fragmentName","join"],"mappings":"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"}