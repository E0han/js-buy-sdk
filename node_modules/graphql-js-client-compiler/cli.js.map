{"version":3,"file":"cli.js","sources":["src/query-compilers.js","src/profilers.js","src/schema-compilers.js","src/find-undefined-fragments.js","src/fragment-files-for-document.js","src/cli-controller.js","src/usage.js","src/cli.js","src/cli-executor.js"],"sourcesContent":["import * as t from 'babel-types';\nimport generate from 'babel-generator';\nimport {transformToAst} from 'graphql-to-js-client-builder';\n\nfunction baseAst(graphQlCode) {\n  const clientVar = 'client';\n  const documentVar = 'document';\n  const spreadsVar = 'spreads';\n  const variablesVar = 'variables';\n\n  return t.functionDeclaration(\n    t.identifier('query'),\n    [t.identifier(clientVar)],\n    t.blockStatement(\n      transformToAst(graphQlCode, {\n        clientVar,\n        documentVar,\n        spreadsVar,\n        variablesVar\n      }).concat(\n        t.returnStatement(t.identifier(documentVar))\n      )\n    )\n  );\n\n}\n\nexport function compileToFunction(graphQlCode) {\n  const ast = baseAst(graphQlCode);\n\n  return `${generate(t.program([ast])).code}\\n`;\n}\n\nexport function compileToModule(graphQlCode) {\n  const ast = t.exportDefaultDeclaration(baseAst(graphQlCode));\n\n  return `${generate(t.program([ast])).code}\\n`;\n}\n","import Module from 'module';\nimport Client from 'graphql-js-client/dev';\nimport {compileToFunction} from './query-compilers';\n\nexport function profileQuery(query, types) {\n  return profileQueries([query], types);\n}\n\nexport function profileQueries(queries, types) {\n  const client = new Client(types, {url: 'https://not-an-api.com'});\n\n  const functions = queries.map((query) => {\n    const code = compileToFunction(query);\n    const virtualModule = new Module();\n\n    virtualModule._compile(`module.exports = ${code}`, '');\n\n    return virtualModule.exports;\n  });\n\n  Client.resetProfiler();\n  Client.startProfiling();\n\n  functions.forEach((func) => {\n    func(client);\n  });\n\n  Client.pauseProfiling();\n\n  return Client.captureProfile();\n}\n","import Module from 'module';\nimport {generateSchemaBundle} from 'graphql-js-schema';\nimport {graphql, buildSchema} from 'graphql';\nimport {introspectionQuery} from 'graphql/utilities';\nimport {profileQueries} from './profilers';\n\nfunction schemaIDLToJson(schemaIDL) {\n  const schema = buildSchema(schemaIDL);\n\n  return graphql(schema, introspectionQuery);\n}\n\nexport function compileSchemaJson(schemaJson, {profile = null} = {}) {\n  let schema;\n\n  if (typeof schemaJson === 'string') {\n    schema = JSON.parse(schemaJson);\n  } else {\n    schema = schemaJson;\n  }\n\n  return generateSchemaBundle(schema, 'Types', profile).then((bundle) => {\n    return bundle.body;\n  });\n}\n\nexport function compileSchemaIDL(schemaIDL, {profile = null} = {}) {\n  return schemaIDLToJson(schemaIDL).then((schemaJson) => {\n    return compileSchemaJson(schemaJson, {profile});\n  });\n}\n\nexport function compileOptimizedSchemaJson(schemaJson, {documents}) {\n  return compileSchemaJson(schemaJson).then((typesCode) => {\n    const typesCjsCode = typesCode.replace('export default', 'module.exports =');\n    const typesModule = new Module();\n\n    typesModule._compile(typesCjsCode, '');\n\n    const types = typesModule.exports;\n    const profile = profileQueries(documents, types);\n\n    return compileSchemaJson(schemaJson, {profile});\n  });\n}\n\nexport function compileOptimizedSchemaIDL(schemaIDL, {documents}) {\n  return schemaIDLToJson(schemaIDL).then((schemaJson) => {\n    return compileOptimizedSchemaJson(schemaJson, {documents});\n  });\n}\n","import {parse, visit} from 'graphql/language';\n\nexport default function findUndefinedFragments(document) {\n  const definitionNames = [];\n  const spreadNames = [];\n\n  visit(parse(document), {\n    FragmentDefinition(nodes) {\n      definitionNames.push(nodes.name.value);\n    },\n    FragmentSpread(nodes) {\n      spreadNames.push(nodes.name.value);\n    }\n  });\n\n  return spreadNames.filter((name) => {\n    return !definitionNames.includes(name);\n  });\n}\n","import {dirname, join} from 'path';\nimport findUndefinedFragments from './find-undefined-fragments';\n\nexport default function fragmentFilesForDocument(documentPath, document) {\n  const undefinedFragments = findUndefinedFragments(document);\n  const workingDirectory = dirname(documentPath);\n\n  return undefinedFragments.map((fragmentName) => {\n    return join(workingDirectory, `${fragmentName}.graphql`);\n  });\n}\n","import minimist from 'minimist';\nimport {resolve} from 'path';\nimport {readFileSync} from 'fs';\nimport {\n  compileToModule,\n  compileOptimizedSchemaJson,\n  compileOptimizedSchemaIDL,\n  compileSchemaJson,\n  compileSchemaIDL\n} from './index';\n\nfunction splitFiles(files, schemaPath) {\n  const filenames = files.map((path) => resolve(path));\n  const schema = resolve(schemaPath);\n\n  const documents = filenames.filter((filename) => {\n    return schema !== filename;\n  });\n\n  return {documents, schema};\n}\n\nfunction detectSchemaFormat(fullPath) {\n  const body = readFileSync(fullPath);\n\n  try {\n    JSON.parse(body);\n\n    return 'json';\n  } catch (_) {\n    return 'idl';\n  }\n}\n\nexport default function run(argv) {\n  const args = minimist(argv, {\n    string: ['outdir', 'schema'],\n    boolean: ['optimize', 'help'],\n    default: {\n      help: false,\n      optimize: false,\n      schema: '',\n      outdir: '.'\n    }\n  });\n\n  const {outdir, schema, optimize, help} = args;\n  const files = args._;\n\n  if (help || (files.length === 0 && !schema)) {\n    return {help: true};\n  }\n\n  const {schema: schemaFullPath, documents} = splitFiles(files, schema);\n\n  const documentCompiler = compileToModule;\n  let schemaCompiler = null;\n  let schemaFormat;\n\n  if (schema) {\n    schemaFormat = detectSchemaFormat(schemaFullPath);\n  }\n\n  if (optimize) {\n    if (!schema) {\n      throw new Error(`\n        Can not generate an optimized bundle without a schema.\n        Please provide a schema file\n      `);\n    }\n\n    if (schemaFormat === 'json') {\n      schemaCompiler = compileOptimizedSchemaJson;\n    } else {\n      schemaCompiler = compileOptimizedSchemaIDL;\n    }\n  } else if (schema && schemaFormat) {\n    if (schemaFormat === 'json') {\n      schemaCompiler = compileSchemaJson;\n    } else {\n      schemaCompiler = compileSchemaIDL;\n    }\n  }\n\n  return {\n    documentCompiler,\n    documents,\n    schemaCompiler,\n    schema: schema && schemaFullPath,\n    outdir: resolve(outdir)\n  };\n}\n","import usage from 'command-line-usage';\n\nexport default usage([\n  {\n    header: 'GraphQL JS Client Compiler',\n    content: 'Converts GraphQL files and schema definitions into ES Modules'\n  }, {\n    header: 'Options',\n    optionList: [{\n      name: 'help',\n      description: 'Print this usage guide.'\n    }, {\n      name: 'schema',\n      typeLabel: '[underline]{file}',\n      description: 'The schema file to process. This can be in JSON (.json) or IDL (.graphql) format.'\n    }, {\n      name: 'outdir',\n      typeLabel: '[underline]{path}',\n      description: '[underline]{default: \".\"} The path to write the compiled files, preserving directory structure from the source. This path will be created if it does not exist.'\n    }, {\n      name: 'optimize',\n      description: 'Specifiy the \"optimize\" option to generate an optimized type bundle. This operation is slow and should only be used in production'\n    }]\n  }, {\n    header: 'Examples',\n    content: [{\n      desc: '1. Converting a bunch of graphql queries.',\n      example: '$ graphql-js-client-compiler queries/**/*.graphql some-other-query.graphql'\n    }, {\n      desc: '2. Convert a bunch of queries, and a schema.',\n      example: '$ graphql-js-client-compiler --schema schema.graphql queries/**/*.graphql'\n    }, {\n      desc: '3. Complete example: Convert a bunch of queries, a schema, and optimize the schema output for unly used types.',\n      example: '$ graphql-js-client-compiler --outdir src --schema schema.graphql --optimize queries/**/*.graphql'\n    }]\n  }\n]);\n","import {readFileSync, writeFileSync} from 'fs';\nimport {relative, basename, dirname, join} from 'path';\nimport mkdirp from 'mkdirp';\nimport controller from './cli-controller';\nimport usage from './usage';\nimport fragmentFilesForDocument from './fragment-files-for-document';\n\nfunction read(path, silent) {\n  if (!silent) {\n    // Double space after read to align with [WRITE]\n    console.log(`[READ]  ${path}`);\n  }\n\n  return readFileSync(path).toString();\n}\n\nfunction write(path, body, silent) {\n  if (!silent) {\n    console.log(`[WRITE] ${path}`);\n  }\n\n  return writeFileSync(path, body);\n}\n\nfunction readDocuments(documents, silent) {\n  return documents.map((path) => {\n    return {\n      body: read(path, silent),\n      path\n    };\n  });\n}\n\nfunction concatBodies(files) {\n  return files.reduce((buffer, file) => {\n    return buffer + file.body;\n  }, '');\n}\n\nfunction concatenateAndStripFragments(documentCode) {\n  const allFragments = [];\n\n  return documentCode.map((document) => {\n    const fragmentFiles = fragmentFilesForDocument(document.path, document.body);\n\n    if (fragmentFiles.length) {\n      const fragments = documentCode.filter((possibleFragment) => {\n        return fragmentFiles.includes(possibleFragment.path);\n      });\n\n      allFragments.push(...fragments);\n\n      return {\n        body: concatBodies(fragments.concat(document)),\n        path: document.path\n      };\n    }\n\n    return document;\n  }).filter((documentOrFragment) => {\n    return !allFragments.includes(documentOrFragment);\n  });\n}\n\nfunction compileDocuments({documentCode, documentCompiler, outdir, silent}) {\n  const compiledDocuments = documentCode.map((document) => {\n    const relativePath = relative(process.cwd(), document.path);\n    const filename = basename(relativePath, '.graphql');\n    const relativeDirectory = dirname(relativePath);\n    const outputPath = join(outdir, relativeDirectory, `${filename}.js`);\n\n    return {\n      body: documentCompiler(document.body),\n      path: outputPath\n    };\n  });\n\n  compiledDocuments.forEach((document) => {\n    mkdirp.sync(dirname(document.path));\n\n    write(document.path, document.body, silent);\n  });\n\n  return documentCode.map((document) => document.body);\n}\n\nfunction compileSchema({outdir, documentCode, schema, schemaCompiler, silent}) {\n  const documentBodies = documentCode.map((document) => document.body);\n  const schemaBody = read(schema, silent);\n  const relativeSchemaPath = relative(process.cwd(), schema);\n  const extension = `.${schema.split('.').pop()}`;\n  const filename = basename(relativeSchemaPath, extension);\n  const relativeDirectory = dirname(relativeSchemaPath);\n  const outputPath = join(outdir, relativeDirectory, `${filename}.js`);\n\n  return schemaCompiler(schemaBody, {documents: documentBodies}).then((body) => {\n    write(outputPath, body, silent);\n  });\n}\n\nexport default function cli(args, {silent = false} = {}) {\n  const {\n    documents,\n    documentCompiler,\n    schema,\n    schemaCompiler,\n    outdir,\n    help\n  } = controller(args);\n\n  if (help) {\n    console.log(usage);\n    process.exit(0);\n  }\n\n  mkdirp.sync(outdir);\n\n  const rawDocumentCode = readDocuments(documents, silent);\n  const documentCode = concatenateAndStripFragments(rawDocumentCode);\n\n  compileDocuments({outdir, documentCode, documentCompiler, silent});\n\n  if (schema && schemaCompiler) {\n    return compileSchema({outdir, documentCode, schema, schemaCompiler, silent});\n  }\n\n  return Promise.resolve();\n}\n","import cli from './cli';\n\ncli(process.argv.slice(2));\n"],"names":["baseAst","graphQlCode","clientVar","documentVar","spreadsVar","variablesVar","t","transformToAst","concat","compileToFunction","ast","generate","code","compileToModule","profileQueries","queries","types","client","Client","url","functions","map","query","virtualModule","Module","_compile","exports","resetProfiler","startProfiling","forEach","func","pauseProfiling","captureProfile","schemaIDLToJson","schemaIDL","schema","buildSchema","graphql","introspectionQuery","compileSchemaJson","schemaJson","profile","JSON","parse","generateSchemaBundle","then","bundle","body","compileSchemaIDL","compileOptimizedSchemaJson","documents","typesCode","typesCjsCode","replace","typesModule","compileOptimizedSchemaIDL","findUndefinedFragments","document","definitionNames","spreadNames","nodes","push","name","value","filter","includes","fragmentFilesForDocument","documentPath","undefinedFragments","workingDirectory","dirname","fragmentName","join","splitFiles","files","schemaPath","filenames","path","resolve","filename","detectSchemaFormat","fullPath","readFileSync","_","run","argv","args","minimist","outdir","optimize","help","length","schemaFullPath","documentCompiler","schemaCompiler","schemaFormat","Error","usage","read","silent","log","toString","write","writeFileSync","readDocuments","concatBodies","reduce","buffer","file","concatenateAndStripFragments","documentCode","allFragments","fragmentFiles","fragments","possibleFragment","documentOrFragment","compileDocuments","compiledDocuments","relativePath","relative","process","cwd","basename","relativeDirectory","outputPath","sync","compileSchema","documentBodies","schemaBody","relativeSchemaPath","extension","split","pop","cli","controller","exit","rawDocumentCode","Promise","slice"],"mappings":"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"}