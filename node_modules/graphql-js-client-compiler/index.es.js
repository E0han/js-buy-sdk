/*
The MIT License (MIT)
Copyright (c) 2016 Shopify Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.


Version: 0.2.0 Commit: 74777ad
*/
import { blockStatement, exportDefaultDeclaration, functionDeclaration, identifier, program, returnStatement } from 'babel-types';
import * as t from 'babel-types';
import generate from 'babel-generator';
import { transformToAst } from 'graphql-to-js-client-builder';
import Module from 'module';
import Client from 'graphql-js-client/dev';
import { generateSchemaBundle } from 'graphql-js-schema';
import { buildSchema, graphql as graphql$1 } from 'graphql';
import { introspectionQuery } from 'graphql/utilities';
import { parse, visit } from 'graphql/language';
import { dirname, join } from 'path';

function baseAst(graphQlCode) {
  const clientVar = 'client';
  const documentVar = 'document';
  const spreadsVar = 'spreads';
  const variablesVar = 'variables';

  return functionDeclaration(identifier('query'), [identifier(clientVar)], blockStatement(transformToAst(graphQlCode, {
    clientVar,
    documentVar,
    spreadsVar,
    variablesVar
  }).concat(returnStatement(identifier(documentVar)))));
}

function compileToFunction(graphQlCode) {
  const ast = baseAst(graphQlCode);

  return `${generate(program([ast])).code}\n`;
}

function compileToModule(graphQlCode) {
  const ast = exportDefaultDeclaration(baseAst(graphQlCode));

  return `${generate(program([ast])).code}\n`;
}

function profileQuery(query, types) {
  return profileQueries([query], types);
}

function profileQueries(queries, types) {
  const client = new Client(types, { url: 'https://not-an-api.com' });

  const functions = queries.map(query => {
    const code = compileToFunction(query);
    const virtualModule = new Module();

    virtualModule._compile(`module.exports = ${code}`, '');

    return virtualModule.exports;
  });

  Client.resetProfiler();
  Client.startProfiling();

  functions.forEach(func => {
    func(client);
  });

  Client.pauseProfiling();

  return Client.captureProfile();
}

function schemaIDLToJson(schemaIDL) {
  const schema = buildSchema(schemaIDL);

  return graphql$1(schema, introspectionQuery);
}

function compileSchemaJson(schemaJson, { profile = null } = {}) {
  let schema;

  if (typeof schemaJson === 'string') {
    schema = JSON.parse(schemaJson);
  } else {
    schema = schemaJson;
  }

  return generateSchemaBundle(schema, 'Types', profile).then(bundle => {
    return bundle.body;
  });
}

function compileSchemaIDL(schemaIDL, { profile = null } = {}) {
  return schemaIDLToJson(schemaIDL).then(schemaJson => {
    return compileSchemaJson(schemaJson, { profile });
  });
}

function compileOptimizedSchemaJson(schemaJson, { documents }) {
  return compileSchemaJson(schemaJson).then(typesCode => {
    const typesCjsCode = typesCode.replace('export default', 'module.exports =');
    const typesModule = new Module();

    typesModule._compile(typesCjsCode, '');

    const types = typesModule.exports;
    const profile = profileQueries(documents, types);

    return compileSchemaJson(schemaJson, { profile });
  });
}

function compileOptimizedSchemaIDL(schemaIDL, { documents }) {
  return schemaIDLToJson(schemaIDL).then(schemaJson => {
    return compileOptimizedSchemaJson(schemaJson, { documents });
  });
}

function findUndefinedFragments(document) {
  const definitionNames = [];
  const spreadNames = [];

  visit(parse(document), {
    FragmentDefinition(nodes) {
      definitionNames.push(nodes.name.value);
    },
    FragmentSpread(nodes) {
      spreadNames.push(nodes.name.value);
    }
  });

  return spreadNames.filter(name => {
    return !definitionNames.includes(name);
  });
}

function fragmentFilesForDocument(documentPath, document) {
  const undefinedFragments = findUndefinedFragments(document);
  const workingDirectory = dirname(documentPath);

  return undefinedFragments.map(fragmentName => {
    return join(workingDirectory, `${fragmentName}.graphql`);
  });
}

export { compileToFunction, compileToModule, profileQuery, profileQueries, compileSchemaJson, compileSchemaIDL, compileOptimizedSchemaJson, compileOptimizedSchemaIDL, findUndefinedFragments, fragmentFilesForDocument };
//# sourceMappingURL=index.es.js.map
