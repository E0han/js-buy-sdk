#!/usr/bin/env node

/*
The MIT License (MIT)
Copyright (c) 2016 Shopify Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.


Version: 0.2.0 Commit: 74777ad
*/
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = require('fs');
var path = require('path');
var mkdirp = _interopDefault(require('mkdirp'));
var minimist = _interopDefault(require('minimist'));
var t = require('babel-types');
var generate = _interopDefault(require('babel-generator'));
var graphqlToJsClientBuilder = require('graphql-to-js-client-builder');
var Module = _interopDefault(require('module'));
var Client = _interopDefault(require('graphql-js-client/dev'));
var graphqlJsSchema = require('graphql-js-schema');
var graphql = require('graphql');
var graphql_utilities = require('graphql/utilities');
var graphql_language = require('graphql/language');
var usage = _interopDefault(require('command-line-usage'));

function baseAst(graphQlCode) {
  const clientVar = 'client';
  const documentVar = 'document';
  const spreadsVar = 'spreads';
  const variablesVar = 'variables';

  return t.functionDeclaration(t.identifier('query'), [t.identifier(clientVar)], t.blockStatement(graphqlToJsClientBuilder.transformToAst(graphQlCode, {
    clientVar,
    documentVar,
    spreadsVar,
    variablesVar
  }).concat(t.returnStatement(t.identifier(documentVar)))));
}

function compileToFunction(graphQlCode) {
  const ast = baseAst(graphQlCode);

  return `${generate(t.program([ast])).code}\n`;
}

function compileToModule(graphQlCode) {
  const ast = t.exportDefaultDeclaration(baseAst(graphQlCode));

  return `${generate(t.program([ast])).code}\n`;
}

function profileQueries(queries, types) {
  const client = new Client(types, { url: 'https://not-an-api.com' });

  const functions = queries.map(query => {
    const code = compileToFunction(query);
    const virtualModule = new Module();

    virtualModule._compile(`module.exports = ${code}`, '');

    return virtualModule.exports;
  });

  Client.resetProfiler();
  Client.startProfiling();

  functions.forEach(func => {
    func(client);
  });

  Client.pauseProfiling();

  return Client.captureProfile();
}

function schemaIDLToJson(schemaIDL) {
  const schema = graphql.buildSchema(schemaIDL);

  return graphql.graphql(schema, graphql_utilities.introspectionQuery);
}

function compileSchemaJson(schemaJson, { profile = null } = {}) {
  let schema;

  if (typeof schemaJson === 'string') {
    schema = JSON.parse(schemaJson);
  } else {
    schema = schemaJson;
  }

  return graphqlJsSchema.generateSchemaBundle(schema, 'Types', profile).then(bundle => {
    return bundle.body;
  });
}

function compileSchemaIDL(schemaIDL, { profile = null } = {}) {
  return schemaIDLToJson(schemaIDL).then(schemaJson => {
    return compileSchemaJson(schemaJson, { profile });
  });
}

function compileOptimizedSchemaJson(schemaJson, { documents }) {
  return compileSchemaJson(schemaJson).then(typesCode => {
    const typesCjsCode = typesCode.replace('export default', 'module.exports =');
    const typesModule = new Module();

    typesModule._compile(typesCjsCode, '');

    const types = typesModule.exports;
    const profile = profileQueries(documents, types);

    return compileSchemaJson(schemaJson, { profile });
  });
}

function compileOptimizedSchemaIDL(schemaIDL, { documents }) {
  return schemaIDLToJson(schemaIDL).then(schemaJson => {
    return compileOptimizedSchemaJson(schemaJson, { documents });
  });
}

function findUndefinedFragments(document) {
  const definitionNames = [];
  const spreadNames = [];

  graphql_language.visit(graphql_language.parse(document), {
    FragmentDefinition(nodes) {
      definitionNames.push(nodes.name.value);
    },
    FragmentSpread(nodes) {
      spreadNames.push(nodes.name.value);
    }
  });

  return spreadNames.filter(name => {
    return !definitionNames.includes(name);
  });
}

function fragmentFilesForDocument(documentPath, document) {
  const undefinedFragments = findUndefinedFragments(document);
  const workingDirectory = path.dirname(documentPath);

  return undefinedFragments.map(fragmentName => {
    return path.join(workingDirectory, `${fragmentName}.graphql`);
  });
}

function splitFiles(files, schemaPath) {
  const filenames = files.map(path$$1 => path.resolve(path$$1));
  const schema = path.resolve(schemaPath);

  const documents = filenames.filter(filename => {
    return schema !== filename;
  });

  return { documents, schema };
}

function detectSchemaFormat(fullPath) {
  const body = fs.readFileSync(fullPath);

  try {
    JSON.parse(body);

    return 'json';
  } catch (_) {
    return 'idl';
  }
}

function run(argv) {
  const args = minimist(argv, {
    string: ['outdir', 'schema'],
    boolean: ['optimize', 'help'],
    default: {
      help: false,
      optimize: false,
      schema: '',
      outdir: '.'
    }
  });

  const { outdir, schema, optimize, help } = args;
  const files = args._;

  if (help || files.length === 0 && !schema) {
    return { help: true };
  }

  const { schema: schemaFullPath, documents } = splitFiles(files, schema);

  const documentCompiler = compileToModule;
  let schemaCompiler = null;
  let schemaFormat;

  if (schema) {
    schemaFormat = detectSchemaFormat(schemaFullPath);
  }

  if (optimize) {
    if (!schema) {
      throw new Error(`
        Can not generate an optimized bundle without a schema.
        Please provide a schema file
      `);
    }

    if (schemaFormat === 'json') {
      schemaCompiler = compileOptimizedSchemaJson;
    } else {
      schemaCompiler = compileOptimizedSchemaIDL;
    }
  } else if (schema && schemaFormat) {
    if (schemaFormat === 'json') {
      schemaCompiler = compileSchemaJson;
    } else {
      schemaCompiler = compileSchemaIDL;
    }
  }

  return {
    documentCompiler,
    documents,
    schemaCompiler,
    schema: schema && schemaFullPath,
    outdir: path.resolve(outdir)
  };
}

var usage$1 = usage([{
  header: 'GraphQL JS Client Compiler',
  content: 'Converts GraphQL files and schema definitions into ES Modules'
}, {
  header: 'Options',
  optionList: [{
    name: 'help',
    description: 'Print this usage guide.'
  }, {
    name: 'schema',
    typeLabel: '[underline]{file}',
    description: 'The schema file to process. This can be in JSON (.json) or IDL (.graphql) format.'
  }, {
    name: 'outdir',
    typeLabel: '[underline]{path}',
    description: '[underline]{default: "."} The path to write the compiled files, preserving directory structure from the source. This path will be created if it does not exist.'
  }, {
    name: 'optimize',
    description: 'Specifiy the "optimize" option to generate an optimized type bundle. This operation is slow and should only be used in production'
  }]
}, {
  header: 'Examples',
  content: [{
    desc: '1. Converting a bunch of graphql queries.',
    example: '$ graphql-js-client-compiler queries/**/*.graphql some-other-query.graphql'
  }, {
    desc: '2. Convert a bunch of queries, and a schema.',
    example: '$ graphql-js-client-compiler --schema schema.graphql queries/**/*.graphql'
  }, {
    desc: '3. Complete example: Convert a bunch of queries, a schema, and optimize the schema output for unly used types.',
    example: '$ graphql-js-client-compiler --outdir src --schema schema.graphql --optimize queries/**/*.graphql'
  }]
}]);

function read(path$$1, silent) {
  if (!silent) {
    // Double space after read to align with [WRITE]
    console.log(`[READ]  ${path$$1}`);
  }

  return fs.readFileSync(path$$1).toString();
}

function write(path$$1, body, silent) {
  if (!silent) {
    console.log(`[WRITE] ${path$$1}`);
  }

  return fs.writeFileSync(path$$1, body);
}

function readDocuments(documents, silent) {
  return documents.map(path$$1 => {
    return {
      body: read(path$$1, silent),
      path: path$$1
    };
  });
}

function concatBodies(files) {
  return files.reduce((buffer, file) => {
    return buffer + file.body;
  }, '');
}

function concatenateAndStripFragments(documentCode) {
  const allFragments = [];

  return documentCode.map(document => {
    const fragmentFiles = fragmentFilesForDocument(document.path, document.body);

    if (fragmentFiles.length) {
      const fragments = documentCode.filter(possibleFragment => {
        return fragmentFiles.includes(possibleFragment.path);
      });

      allFragments.push(...fragments);

      return {
        body: concatBodies(fragments.concat(document)),
        path: document.path
      };
    }

    return document;
  }).filter(documentOrFragment => {
    return !allFragments.includes(documentOrFragment);
  });
}

function compileDocuments({ documentCode, documentCompiler, outdir, silent }) {
  const compiledDocuments = documentCode.map(document => {
    const relativePath = path.relative(process.cwd(), document.path);
    const filename = path.basename(relativePath, '.graphql');
    const relativeDirectory = path.dirname(relativePath);
    const outputPath = path.join(outdir, relativeDirectory, `${filename}.js`);

    return {
      body: documentCompiler(document.body),
      path: outputPath
    };
  });

  compiledDocuments.forEach(document => {
    mkdirp.sync(path.dirname(document.path));

    write(document.path, document.body, silent);
  });

  return documentCode.map(document => document.body);
}

function compileSchema({ outdir, documentCode, schema, schemaCompiler, silent }) {
  const documentBodies = documentCode.map(document => document.body);
  const schemaBody = read(schema, silent);
  const relativeSchemaPath = path.relative(process.cwd(), schema);
  const extension = `.${schema.split('.').pop()}`;
  const filename = path.basename(relativeSchemaPath, extension);
  const relativeDirectory = path.dirname(relativeSchemaPath);
  const outputPath = path.join(outdir, relativeDirectory, `${filename}.js`);

  return schemaCompiler(schemaBody, { documents: documentBodies }).then(body => {
    write(outputPath, body, silent);
  });
}

function cli(args, { silent = false } = {}) {
  const {
    documents,
    documentCompiler,
    schema,
    schemaCompiler,
    outdir,
    help
  } = run(args);

  if (help) {
    console.log(usage$1);
    process.exit(0);
  }

  mkdirp.sync(outdir);

  const rawDocumentCode = readDocuments(documents, silent);
  const documentCode = concatenateAndStripFragments(rawDocumentCode);

  compileDocuments({ outdir, documentCode, documentCompiler, silent });

  if (schema && schemaCompiler) {
    return compileSchema({ outdir, documentCode, schema, schemaCompiler, silent });
  }

  return Promise.resolve();
}

cli(process.argv.slice(2));
//# sourceMappingURL=cli.js.map
