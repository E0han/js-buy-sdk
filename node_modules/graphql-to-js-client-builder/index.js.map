{"version":3,"file":"index.js","sources":["src/sort-definitions.js","src/variable-reference.js","src/arg-value-to-js.js","src/arg-to-js.js","src/selection-set-to-js.js","src/fragment-visitor.js","src/reference-variables-in-operation-declaration.js","src/operation-name.js","src/operation-visitor.js","src/construct-js-variable-definition.js","src/declare-variables.js","src/document-to-js-ast.js","src/index.js"],"sourcesContent":["import {visit} from 'graphql/language';\n\n// Recursive helper function for sortDefinitions\nfunction visitFragment(fragment, fragments, fragmentsHash) {\n  if (fragment.marked) {\n    throw Error('Fragments cannot contain a cycle');\n  }\n  if (!fragment.visited) {\n    fragment.marked = true;\n    // Visit every spread in this fragment definition\n    visit(fragment, {\n      FragmentSpread(node) {\n        // Visit the corresponding fragment definition\n        visitFragment(fragmentsHash[node.name.value], fragments, fragmentsHash);\n      }\n    });\n    fragment.visited = true;\n    fragment.marked = false;\n    fragments.push(fragment);\n  }\n}\n\n// Sorts the definitions such that all fragment definitions are before operation\n// definitions and fragments definitions are in reverse topological order\nexport default function sortDefinitions(definitions) {\n  const fragments = definitions.filter((definition) => {\n    return definition.kind === 'FragmentDefinition';\n  });\n\n  // Set up a hash for quick lookup\n  const fragmentsHash = {};\n\n  fragments.forEach((fragment) => {\n    fragmentsHash[fragment.name.value] = fragment;\n  });\n\n  const operations = definitions.filter((definition) => {\n    return definition.kind === 'OperationDefinition';\n  });\n\n  const sortedFragments = [];\n\n  fragments.forEach((fragment) => {\n    if (!fragment.visited) {\n      visitFragment(fragment, sortedFragments, fragmentsHash);\n    }\n  });\n\n  return sortedFragments.concat(operations);\n}\n","import * as t from 'babel-types';\n\nexport default function variableReference(operationName, variable, {variablesVar}) {\n  return t.memberExpression(\n    t.memberExpression(\n      variablesVar,\n      t.identifier(operationName)\n    ),\n    t.identifier(variable.name.value)\n  );\n}\n","import * as t from 'babel-types';\nimport variableReference from './variable-reference';\n\nexport default function argValueToJS(argumentValue, operationName, config) {\n  switch (argumentValue.kind) {\n    case 'StringValue':\n      return t.stringLiteral(argumentValue.value);\n    case 'EnumValue':\n      return t.callExpression(\n        t.memberExpression(config.clientVar, t.identifier('enum')),\n        [t.stringLiteral(argumentValue.value)]\n      );\n    case 'IntValue':\n      return t.numericLiteral(parseInt(argumentValue.value, 10));\n    case 'FloatValue':\n      return t.numericLiteral(parseFloat(argumentValue.value));\n    case 'BooleanValue':\n      return t.booleanLiteral(argumentValue.value);\n    case 'ListValue':\n      return t.arrayExpression(argumentValue.values.map((value) => {\n        return argValueToJS(value, operationName, config);\n      }));\n    case 'ObjectValue':\n      return t.objectExpression(argumentValue.fields.map((field) => {\n        return t.objectProperty(\n          t.identifier(field.name.value),\n          argValueToJS(field.value, operationName, config)\n        );\n      }));\n    case 'Variable':\n      return variableReference(operationName, argumentValue, config);\n    default:\n      throw Error(`Unrecognized argument value type \"${argumentValue.kind}\"`);\n  }\n}\n","import * as t from 'babel-types';\nimport argValueToJS from './arg-value-to-js';\n\nexport default function argToJS(key, args, operationName, config) {\n  const argFields = args.map((argument) => {\n    return t.objectProperty(\n      t.identifier(argument.name.value),\n      argValueToJS(argument.value, operationName, config)\n    );\n  });\n\n  return t.objectProperty(key, t.objectExpression(argFields));\n}\n","import * as t from 'babel-types';\nimport argToJS from './arg-to-js';\n\nfunction identifyOperation(selection, {spreadsVar}) {\n  switch (selection.kind) {\n    case 'Field':\n      return {\n        selectionConstructionArgs: [t.stringLiteral(selection.name.value)],\n        operationMethodName: 'add',\n        kind: 'Field'\n      };\n    case 'InlineFragment':\n      return {\n        selectionConstructionArgs: [t.stringLiteral(selection.typeCondition.name.value)],\n        operationMethodName: 'addInlineFragmentOn',\n        kind: 'InlineFragment'\n      };\n    default:\n      return {\n        selectionConstructionArgs: [t.memberExpression(spreadsVar, t.identifier(selection.name.value))],\n        operationMethodName: 'addFragment',\n        kind: 'Fragment'\n      };\n  }\n}\n\nfunction applyAlias(options, selection) {\n  if (selection.alias) {\n    options.push(t.objectProperty(t.identifier('alias'), t.stringLiteral(selection.alias.value)));\n  }\n}\n\nfunction applyArguments(options, selection, operationName, config) {\n  if (!(selection.arguments && selection.arguments.length)) {\n    return;\n  }\n\n  options.push(argToJS(t.identifier('args'), selection.arguments, operationName, config));\n}\n\n// Returns the body of the block statement representing the selections\nexport default function selectionSetToJS(selectionSet, parentSelectionName, operationName, config) {\n  const selections = selectionSet.selections.map((selection) => {\n    const {selectionConstructionArgs, operationMethodName, kind} = identifyOperation(selection, config);\n    const fieldOptions = [];\n\n    applyAlias(fieldOptions, selection);\n    applyArguments(fieldOptions, selection, operationName, config);\n\n    // Add query options (i.e. alias and arguments) to the query\n    if (fieldOptions.length) {\n      selectionConstructionArgs.push(t.objectExpression(fieldOptions));\n    }\n\n    if (['Field', 'InlineFragment'].includes(kind) && selection.selectionSet) {\n      const fieldNameOrTypeConstraint = selectionConstructionArgs[0].value;\n\n      selectionConstructionArgs.push(\n        selectionSetToJS(selection.selectionSet, fieldNameOrTypeConstraint, operationName, config)\n      );\n    }\n\n    return t.expressionStatement(\n      t.callExpression(\n        t.memberExpression(\n          t.identifier(parentSelectionName),\n          t.identifier(operationMethodName)\n        ),\n        selectionConstructionArgs\n      )\n    );\n  });\n\n  return t.arrowFunctionExpression([t.identifier(parentSelectionName)], t.blockStatement(selections));\n}\n","import * as t from 'babel-types';\nimport selectionSetToJS from './selection-set-to-js';\n\nexport default function fragmentVisitor(jsNodes, config) {\n  return function visitor(node) {\n    const selectionRootName = 'root';\n    const fragmentDefinitionArguments = [\n      t.stringLiteral(node.name.value),\n      t.stringLiteral(node.typeCondition.name.value),\n      selectionSetToJS(node.selectionSet, selectionRootName, null, config)\n    ];\n\n    jsNodes.push(t.expressionStatement(\n      t.assignmentExpression(\n        '=',\n        t.memberExpression(config.spreadsVar, t.identifier(node.name.value)),\n        t.callExpression(\n          t.memberExpression(config.documentVar, t.identifier('defineFragment')),\n          fragmentDefinitionArguments\n        )\n      )\n    ));\n  };\n}\n","import * as t from 'babel-types';\nimport variableReference from './variable-reference';\n\nexport default function referenceVariablesInOperationDeclaration(operationName, variableDefinitions, config) {\n  return t.arrayExpression(variableDefinitions.map((variableAst) => {\n    return variableReference(operationName, variableAst.variable, config);\n  }));\n}\n","export default function operationName(definition) {\n  return definition.name ? definition.name.value : '__defaultOperation__';\n}\n","import * as t from 'babel-types';\nimport selectionSetToJS from './selection-set-to-js';\nimport referenceVariablesInOperationDeclaration from './reference-variables-in-operation-declaration';\nimport operationName from './operation-name';\n\nfunction applyName(graphQLNode, argList) {\n  if (graphQLNode.name) {\n    argList.push(t.stringLiteral(graphQLNode.name.value));\n  }\n}\n\nfunction applyVariables(operationDefinition, argList, config) {\n  const variableDefinitions = operationDefinition.variableDefinitions;\n\n  if (!(variableDefinitions && variableDefinitions.length)) {\n    return;\n  }\n\n  const name = operationName(operationDefinition);\n\n  argList.push(referenceVariablesInOperationDeclaration(name, variableDefinitions, config));\n}\n\nfunction operationFactoryFunction(graphQLNode) {\n  switch (graphQLNode.operation) {\n    case 'query':\n      return 'addQuery';\n    case 'mutation':\n      return 'addMutation';\n    default:\n      throw new Error(`Operation: \"${graphQLNode.operation}\" is not currently supported`);\n  }\n}\n\nexport default function operationVisitor(jsNodes, config) {\n  return function visitor(node) {\n\n    const selectionRootName = 'root';\n    const operationDefinitionArgs = [];\n    const name = operationName(node);\n\n    applyName(node, operationDefinitionArgs);\n    applyVariables(node, operationDefinitionArgs, config);\n\n    operationDefinitionArgs.push(\n      selectionSetToJS(node.selectionSet, selectionRootName, name, config)\n    );\n\n    jsNodes.push(t.expressionStatement(t.callExpression(\n      t.memberExpression(config.documentVar, t.identifier(operationFactoryFunction(node))),\n      operationDefinitionArgs\n    )));\n  };\n}\n","import * as t from 'babel-types';\nimport argValueToJS from './arg-value-to-js';\n\nfunction typeConstraint(variableAst) {\n  switch (variableAst.kind) {\n    case 'NonNullType':\n      return `${typeConstraint(variableAst.type)}!`;\n    case 'ListType':\n      return `[${typeConstraint(variableAst.type)}]`;\n    default:\n      return variableAst.name.value;\n  }\n}\n\nexport default function constructJSVariableDefinition(variableAst, config) {\n  const variableConstructionArgs = [\n    t.stringLiteral(variableAst.variable.name.value),\n    t.stringLiteral(typeConstraint(variableAst.type))\n  ];\n\n  if (variableAst.defaultValue) {\n    variableConstructionArgs.push(argValueToJS(variableAst.defaultValue, null, config));\n  }\n\n  return t.callExpression(\n    t.memberExpression(\n      config.clientVar,\n      t.identifier('variable')\n    ),\n    variableConstructionArgs\n  );\n}\n","import * as t from 'babel-types';\nimport constructJSVariableDefinition from './construct-js-variable-definition';\n\nfunction isOperationDefinition(definition) {\n  return definition.kind === 'OperationDefinition';\n}\n\nfunction hasVariables(definition) {\n  return definition.variableDefinitions && definition.variableDefinitions.length;\n}\n\nfunction nameFromOperation(operationDefinition) {\n  return operationDefinition.name ? operationDefinition.name.value : '__defaultOperation__';\n}\n\nfunction variablesDeclaration({variablesVar}) {\n  return t.variableDeclaration('const', [\n    t.variableDeclarator(variablesVar, t.objectExpression([]))\n  ]);\n}\n\nfunction variablesHashForOperationDeclaration(operationName, {variablesVar}) {\n  return t.expressionStatement(\n    t.assignmentExpression(\n      '=',\n      t.memberExpression(\n        variablesVar,\n        t.identifier(operationName)\n      ),\n      t.objectExpression([])\n    )\n  );\n}\n\nfunction declareVariableForOperation(operationName, variableAst, config) {\n  return t.expressionStatement(\n    t.assignmentExpression(\n      '=',\n      t.memberExpression(\n        t.memberExpression(\n          config.variablesVar,\n          t.identifier(operationName)\n        ),\n        t.identifier(variableAst.variable.name.value)\n      ),\n      constructJSVariableDefinition(variableAst, config)\n    )\n  );\n}\n\nexport default function declareVariables(graphqlAst, config) {\n  const operationsWithVariables = graphqlAst\n    .definitions\n    .filter(isOperationDefinition)\n    .filter(hasVariables);\n\n  if (!operationsWithVariables.length) {\n    return [];\n  }\n\n  return [\n    variablesDeclaration(config),\n    ...(\n      operationsWithVariables\n        .map((operationDefinition) => {\n          const operationName = nameFromOperation(operationDefinition);\n\n          return [\n            variablesHashForOperationDeclaration(operationName, config),\n            ...(\n              operationDefinition.variableDefinitions.map((variableAst) => {\n                return declareVariableForOperation(operationName, variableAst, config);\n              })\n            )\n          ];\n        })\n        .reduce((acc, variablesStatements) => {\n          return acc.concat(variablesStatements);\n        }, [])\n    )\n  ];\n\n}\n","import * as t from 'babel-types';\nimport {visit} from 'graphql/language';\nimport sortDefinitions from './sort-definitions';\nimport fragmentVisitor from './fragment-visitor';\nimport operationVisitor from './operation-visitor';\nimport declareVariables from './declare-variables';\n\nfunction extractFragmentDefinitons(definitions) {\n  return definitions.filter((definition) => definition.kind === 'FragmentDefinition');\n}\n\nfunction insertObjectDeclaration(nodes, identifier) {\n  nodes.push(t.variableDeclaration('const', [\n    t.variableDeclarator(identifier, t.objectExpression([]))\n  ]));\n}\n\nfunction declareDocument(nodes, {documentVar, clientVar}) {\n  nodes.push(t.variableDeclaration('const', [\n    t.variableDeclarator(documentVar,\n      t.callExpression(\n        t.memberExpression(clientVar, t.identifier('document')),\n        []\n      )\n    )\n  ]));\n}\n\nexport default function documentToJSAst(graphQLAst, config) {\n  const jsGraphQLNodes = [];\n\n  declareDocument(jsGraphQLNodes, config);\n\n  const sortedgraphQLAst = Object.assign(\n    {},\n    graphQLAst,\n    {definitions: sortDefinitions(graphQLAst.definitions)}\n  );\n  const fragmentDefinitons = extractFragmentDefinitons(sortedgraphQLAst.definitions);\n\n  if (fragmentDefinitons.length) {\n    insertObjectDeclaration(jsGraphQLNodes, config.spreadsVar);\n  }\n\n  jsGraphQLNodes.push(...declareVariables(graphQLAst, config));\n\n  visit(sortedgraphQLAst, {\n    FragmentDefinition: fragmentVisitor(jsGraphQLNodes, config),\n    OperationDefinition: operationVisitor(jsGraphQLNodes, config)\n  });\n\n  return jsGraphQLNodes;\n}\n","import {parse} from 'graphql/language';\nimport * as t from 'babel-types';\nimport generate from 'babel-generator';\nimport documentToJSAst from './document-to-js-ast';\n\nconst defaults = {\n  clientVar: 'client',\n  documentVar: 'document',\n  spreadsVar: 'spreads',\n  variablesVar: 'variables'\n};\n\nexport function transformToAst(graphqlCode, {\n  clientVar = 'client',\n  documentVar = 'document',\n  spreadsVar = 'spreads',\n  variablesVar = 'variables'\n} = defaults) {\n  const graphQLAst = parse(graphqlCode);\n  const vars = {\n    clientVar: t.identifier(clientVar),\n    documentVar: t.identifier(documentVar),\n    spreadsVar: t.identifier(spreadsVar),\n    variablesVar: t.identifier(variablesVar)\n  };\n\n  return documentToJSAst(graphQLAst, vars);\n}\n\nexport default function transformToCode(graphqlCode, {\n  clientVar = 'client',\n  documentVar = 'document',\n  spreadsVar = 'spreads',\n  variablesVar = 'variables'\n} = defaults) {\n  const jsAst = transformToAst(graphqlCode, {\n    clientVar,\n    documentVar,\n    spreadsVar,\n    variablesVar\n  });\n\n  return `${generate(t.program(jsAst)).code}\\n`;\n}\n"],"names":["visitFragment","fragment","fragments","fragmentsHash","marked","Error","visited","node","name","value","push","sortDefinitions","definitions","filter","definition","kind","forEach","operations","sortedFragments","concat","variableReference","operationName","variable","variablesVar","t","argValueToJS","argumentValue","config","clientVar","parseInt","parseFloat","values","map","fields","field","argToJS","key","args","argFields","argument","identifyOperation","selection","spreadsVar","typeCondition","applyAlias","options","alias","applyArguments","arguments","length","selectionSetToJS","selectionSet","parentSelectionName","selections","selectionConstructionArgs","operationMethodName","fieldOptions","includes","fieldNameOrTypeConstraint","fragmentVisitor","jsNodes","visitor","selectionRootName","fragmentDefinitionArguments","documentVar","referenceVariablesInOperationDeclaration","variableDefinitions","variableAst","applyName","graphQLNode","argList","applyVariables","operationDefinition","operationFactoryFunction","operation","operationVisitor","operationDefinitionArgs","typeConstraint","type","constructJSVariableDefinition","variableConstructionArgs","defaultValue","isOperationDefinition","hasVariables","nameFromOperation","variablesDeclaration","variablesHashForOperationDeclaration","declareVariableForOperation","declareVariables","graphqlAst","operationsWithVariables","reduce","acc","variablesStatements","extractFragmentDefinitons","insertObjectDeclaration","nodes","identifier","declareDocument","documentToJSAst","graphQLAst","jsGraphQLNodes","sortedgraphQLAst","Object","assign","fragmentDefinitons","defaults","transformToAst","graphqlCode","parse","vars","transformToCode","jsAst","generate","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA,SAASA,aAAT,CAAuBC,QAAvB,EAAiCC,SAAjC,EAA4CC,aAA5C,EAA2D;MACrDF,SAASG,MAAb,EAAqB;UACbC,MAAM,kCAAN,CAAN;;MAEE,CAACJ,SAASK,OAAd,EAAuB;aACZF,MAAT,GAAkB,IAAlB;;2BAEMH,QAAN,EAAgB;qBACCM,IAAf,EAAqB;;sBAELJ,cAAcI,KAAKC,IAAL,CAAUC,KAAxB,CAAd,EAA8CP,SAA9C,EAAyDC,aAAzD;;KAHJ;aAMSG,OAAT,GAAmB,IAAnB;aACSF,MAAT,GAAkB,KAAlB;cACUM,IAAV,CAAeT,QAAf;;;;;;AAMJ,AAAe,SAASU,eAAT,CAAyBC,WAAzB,EAAsC;QAC7CV,YAAYU,YAAYC,MAAZ,CAAoBC,UAAD,IAAgB;WAC5CA,WAAWC,IAAX,KAAoB,oBAA3B;GADgB,CAAlB;;;QAKMZ,gBAAgB,EAAtB;;YAEUa,OAAV,CAAmBf,QAAD,IAAc;kBAChBA,SAASO,IAAT,CAAcC,KAA5B,IAAqCR,QAArC;GADF;;QAIMgB,aAAaL,YAAYC,MAAZ,CAAoBC,UAAD,IAAgB;WAC7CA,WAAWC,IAAX,KAAoB,qBAA3B;GADiB,CAAnB;;QAIMG,kBAAkB,EAAxB;;YAEUF,OAAV,CAAmBf,QAAD,IAAc;QAC1B,CAACA,SAASK,OAAd,EAAuB;oBACPL,QAAd,EAAwBiB,eAAxB,EAAyCf,aAAzC;;GAFJ;;SAMOe,gBAAgBC,MAAhB,CAAuBF,UAAvB,CAAP;;;AC9Ca,SAASG,iBAAT,CAA2BC,aAA3B,EAA0CC,QAA1C,EAAoD,EAACC,YAAD,EAApD,EAAoE;SAC1EC,kBAAA,CACLA,kBAAA,CACED,YADF,EAEEC,YAAA,CAAaH,aAAb,CAFF,CADK,EAKLG,YAAA,CAAaF,SAASd,IAAT,CAAcC,KAA3B,CALK,CAAP;;;ACAa,SAASgB,YAAT,CAAsBC,aAAtB,EAAqCL,aAArC,EAAoDM,MAApD,EAA4D;UACjED,cAAcX,IAAtB;SACO,aAAL;aACSS,eAAA,CAAgBE,cAAcjB,KAA9B,CAAP;SACG,WAAL;aACSe,gBAAA,CACLA,kBAAA,CAAmBG,OAAOC,SAA1B,EAAqCJ,YAAA,CAAa,MAAb,CAArC,CADK,EAEL,CAACA,eAAA,CAAgBE,cAAcjB,KAA9B,CAAD,CAFK,CAAP;SAIG,UAAL;aACSe,gBAAA,CAAiBK,SAASH,cAAcjB,KAAvB,EAA8B,EAA9B,CAAjB,CAAP;SACG,YAAL;aACSe,gBAAA,CAAiBM,WAAWJ,cAAcjB,KAAzB,CAAjB,CAAP;SACG,cAAL;aACSe,gBAAA,CAAiBE,cAAcjB,KAA/B,CAAP;SACG,WAAL;aACSe,iBAAA,CAAkBE,cAAcK,MAAd,CAAqBC,GAArB,CAA0BvB,KAAD,IAAW;eACpDgB,aAAahB,KAAb,EAAoBY,aAApB,EAAmCM,MAAnC,CAAP;OADuB,CAAlB,CAAP;SAGG,aAAL;aACSH,kBAAA,CAAmBE,cAAcO,MAAd,CAAqBD,GAArB,CAA0BE,KAAD,IAAW;eACrDV,gBAAA,CACLA,YAAA,CAAaU,MAAM1B,IAAN,CAAWC,KAAxB,CADK,EAELgB,aAAaS,MAAMzB,KAAnB,EAA0BY,aAA1B,EAAyCM,MAAzC,CAFK,CAAP;OADwB,CAAnB,CAAP;SAMG,UAAL;aACSP,kBAAkBC,aAAlB,EAAiCK,aAAjC,EAAgDC,MAAhD,CAAP;;YAEMtB,MAAO,qCAAoCqB,cAAcX,IAAK,GAA9D,CAAN;;;;AC7BS,SAASoB,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BhB,aAA5B,EAA2CM,MAA3C,EAAmD;QAC1DW,YAAYD,KAAKL,GAAL,CAAUO,QAAD,IAAc;WAChCf,gBAAA,CACLA,YAAA,CAAae,SAAS/B,IAAT,CAAcC,KAA3B,CADK,EAELgB,aAAac,SAAS9B,KAAtB,EAA6BY,aAA7B,EAA4CM,MAA5C,CAFK,CAAP;GADgB,CAAlB;;SAOOH,gBAAA,CAAiBY,GAAjB,EAAsBZ,kBAAA,CAAmBc,SAAnB,CAAtB,CAAP;;;ACRF,SAASE,iBAAT,CAA2BC,SAA3B,EAAsC,EAACC,UAAD,EAAtC,EAAoD;UAC1CD,UAAU1B,IAAlB;SACO,OAAL;aACS;mCACsB,CAACS,eAAA,CAAgBiB,UAAUjC,IAAV,CAAeC,KAA/B,CAAD,CADtB;6BAEgB,KAFhB;cAGC;OAHR;SAKG,gBAAL;aACS;mCACsB,CAACe,eAAA,CAAgBiB,UAAUE,aAAV,CAAwBnC,IAAxB,CAA6BC,KAA7C,CAAD,CADtB;6BAEgB,qBAFhB;cAGC;OAHR;;aAMO;mCACsB,CAACe,kBAAA,CAAmBkB,UAAnB,EAA+BlB,YAAA,CAAaiB,UAAUjC,IAAV,CAAeC,KAA5B,CAA/B,CAAD,CADtB;6BAEgB,aAFhB;cAGC;OAHR;;;;AAQN,SAASmC,UAAT,CAAoBC,OAApB,EAA6BJ,SAA7B,EAAwC;MAClCA,UAAUK,KAAd,EAAqB;YACXpC,IAAR,CAAac,gBAAA,CAAiBA,YAAA,CAAa,OAAb,CAAjB,EAAwCA,eAAA,CAAgBiB,UAAUK,KAAV,CAAgBrC,KAAhC,CAAxC,CAAb;;;;AAIJ,SAASsC,cAAT,CAAwBF,OAAxB,EAAiCJ,SAAjC,EAA4CpB,aAA5C,EAA2DM,MAA3D,EAAmE;MAC7D,EAAEc,UAAUO,SAAV,IAAuBP,UAAUO,SAAV,CAAoBC,MAA7C,CAAJ,EAA0D;;;;UAIlDvC,IAAR,CAAayB,QAAQX,YAAA,CAAa,MAAb,CAAR,EAA8BiB,UAAUO,SAAxC,EAAmD3B,aAAnD,EAAkEM,MAAlE,CAAb;;;;AAIF,AAAe,SAASuB,gBAAT,CAA0BC,YAA1B,EAAwCC,mBAAxC,EAA6D/B,aAA7D,EAA4EM,MAA5E,EAAoF;QAC3F0B,aAAaF,aAAaE,UAAb,CAAwBrB,GAAxB,CAA6BS,SAAD,IAAe;6BACGD,kBAAkBC,SAAlB,EAA6Bd,MAA7B,CADH;;UACrD2B,yBADqD,sBACrDA,yBADqD;UAC1BC,mBAD0B,sBAC1BA,mBAD0B;UACLxC,IADK,sBACLA,IADK;;UAEtDyC,eAAe,EAArB;;eAEWA,YAAX,EAAyBf,SAAzB;mBACee,YAAf,EAA6Bf,SAA7B,EAAwCpB,aAAxC,EAAuDM,MAAvD;;;QAGI6B,aAAaP,MAAjB,EAAyB;gCACGvC,IAA1B,CAA+Bc,kBAAA,CAAmBgC,YAAnB,CAA/B;;;QAGE,CAAC,OAAD,EAAU,gBAAV,EAA4BC,QAA5B,CAAqC1C,IAArC,KAA8C0B,UAAUU,YAA5D,EAA0E;YAClEO,4BAA4BJ,0BAA0B,CAA1B,EAA6B7C,KAA/D;;gCAE0BC,IAA1B,CACEwC,iBAAiBT,UAAUU,YAA3B,EAAyCO,yBAAzC,EAAoErC,aAApE,EAAmFM,MAAnF,CADF;;;WAKKH,qBAAA,CACLA,gBAAA,CACEA,kBAAA,CACEA,YAAA,CAAa4B,mBAAb,CADF,EAEE5B,YAAA,CAAa+B,mBAAb,CAFF,CADF,EAKED,yBALF,CADK,CAAP;GApBiB,CAAnB;;SA+BO9B,yBAAA,CAA0B,CAACA,YAAA,CAAa4B,mBAAb,CAAD,CAA1B,EAA+D5B,gBAAA,CAAiB6B,UAAjB,CAA/D,CAAP;;;ACtEa,SAASM,eAAT,CAAyBC,OAAzB,EAAkCjC,MAAlC,EAA0C;SAChD,SAASkC,OAAT,CAAiBtD,IAAjB,EAAuB;UACtBuD,oBAAoB,MAA1B;UACMC,8BAA8B,CAClCvC,eAAA,CAAgBjB,KAAKC,IAAL,CAAUC,KAA1B,CADkC,EAElCe,eAAA,CAAgBjB,KAAKoC,aAAL,CAAmBnC,IAAnB,CAAwBC,KAAxC,CAFkC,EAGlCyC,iBAAiB3C,KAAK4C,YAAtB,EAAoCW,iBAApC,EAAuD,IAAvD,EAA6DnC,MAA7D,CAHkC,CAApC;;YAMQjB,IAAR,CAAac,qBAAA,CACXA,sBAAA,CACE,GADF,EAEEA,kBAAA,CAAmBG,OAAOe,UAA1B,EAAsClB,YAAA,CAAajB,KAAKC,IAAL,CAAUC,KAAvB,CAAtC,CAFF,EAGEe,gBAAA,CACEA,kBAAA,CAAmBG,OAAOqC,WAA1B,EAAuCxC,YAAA,CAAa,gBAAb,CAAvC,CADF,EAEEuC,2BAFF,CAHF,CADW,CAAb;GARF;;;ACDa,SAASE,wCAAT,CAAkD5C,aAAlD,EAAiE6C,mBAAjE,EAAsFvC,MAAtF,EAA8F;SACpGH,iBAAA,CAAkB0C,oBAAoBlC,GAApB,CAAyBmC,WAAD,IAAiB;WACzD/C,kBAAkBC,aAAlB,EAAiC8C,YAAY7C,QAA7C,EAAuDK,MAAvD,CAAP;GADuB,CAAlB,CAAP;;;ACJa,SAASN,aAAT,CAAuBP,UAAvB,EAAmC;SACzCA,WAAWN,IAAX,GAAkBM,WAAWN,IAAX,CAAgBC,KAAlC,GAA0C,sBAAjD;;;ACIF,SAAS2D,SAAT,CAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;MACnCD,YAAY7D,IAAhB,EAAsB;YACZE,IAAR,CAAac,eAAA,CAAgB6C,YAAY7D,IAAZ,CAAiBC,KAAjC,CAAb;;;;AAIJ,SAAS8D,cAAT,CAAwBC,mBAAxB,EAA6CF,OAA7C,EAAsD3C,MAAtD,EAA8D;QACtDuC,sBAAsBM,oBAAoBN,mBAAhD;;MAEI,EAAEA,uBAAuBA,oBAAoBjB,MAA7C,CAAJ,EAA0D;;;;QAIpDzC,OAAOa,cAAcmD,mBAAd,CAAb;;UAEQ9D,IAAR,CAAauD,yCAAyCzD,IAAzC,EAA+C0D,mBAA/C,EAAoEvC,MAApE,CAAb;;;AAGF,SAAS8C,wBAAT,CAAkCJ,WAAlC,EAA+C;UACrCA,YAAYK,SAApB;SACO,OAAL;aACS,UAAP;SACG,UAAL;aACS,aAAP;;YAEM,IAAIrE,KAAJ,CAAW,eAAcgE,YAAYK,SAAU,8BAA/C,CAAN;;;;AAIN,AAAe,SAASC,gBAAT,CAA0Bf,OAA1B,EAAmCjC,MAAnC,EAA2C;SACjD,SAASkC,OAAT,CAAiBtD,IAAjB,EAAuB;;UAEtBuD,oBAAoB,MAA1B;UACMc,0BAA0B,EAAhC;UACMpE,OAAOa,cAAcd,IAAd,CAAb;;cAEUA,IAAV,EAAgBqE,uBAAhB;mBACerE,IAAf,EAAqBqE,uBAArB,EAA8CjD,MAA9C;;4BAEwBjB,IAAxB,CACEwC,iBAAiB3C,KAAK4C,YAAtB,EAAoCW,iBAApC,EAAuDtD,IAAvD,EAA6DmB,MAA7D,CADF;;YAIQjB,IAAR,CAAac,qBAAA,CAAsBA,gBAAA,CACjCA,kBAAA,CAAmBG,OAAOqC,WAA1B,EAAuCxC,YAAA,CAAaiD,yBAAyBlE,IAAzB,CAAb,CAAvC,CADiC,EAEjCqE,uBAFiC,CAAtB,CAAb;GAbF;;;AChCF,SAASC,cAAT,CAAwBV,WAAxB,EAAqC;UAC3BA,YAAYpD,IAApB;SACO,aAAL;aACU,GAAE8D,eAAeV,YAAYW,IAA3B,CAAiC,GAA3C;SACG,UAAL;aACU,IAAGD,eAAeV,YAAYW,IAA3B,CAAiC,GAA5C;;aAEOX,YAAY3D,IAAZ,CAAiBC,KAAxB;;;;AAIN,AAAe,SAASsE,6BAAT,CAAuCZ,WAAvC,EAAoDxC,MAApD,EAA4D;QACnEqD,2BAA2B,CAC/BxD,eAAA,CAAgB2C,YAAY7C,QAAZ,CAAqBd,IAArB,CAA0BC,KAA1C,CAD+B,EAE/Be,eAAA,CAAgBqD,eAAeV,YAAYW,IAA3B,CAAhB,CAF+B,CAAjC;;MAKIX,YAAYc,YAAhB,EAA8B;6BACHvE,IAAzB,CAA8Be,aAAa0C,YAAYc,YAAzB,EAAuC,IAAvC,EAA6CtD,MAA7C,CAA9B;;;SAGKH,gBAAA,CACLA,kBAAA,CACEG,OAAOC,SADT,EAEEJ,YAAA,CAAa,UAAb,CAFF,CADK,EAKLwD,wBALK,CAAP;;;ACrBF,SAASE,qBAAT,CAA+BpE,UAA/B,EAA2C;SAClCA,WAAWC,IAAX,KAAoB,qBAA3B;;;AAGF,SAASoE,YAAT,CAAsBrE,UAAtB,EAAkC;SACzBA,WAAWoD,mBAAX,IAAkCpD,WAAWoD,mBAAX,CAA+BjB,MAAxE;;;AAGF,SAASmC,iBAAT,CAA2BZ,mBAA3B,EAAgD;SACvCA,oBAAoBhE,IAApB,GAA2BgE,oBAAoBhE,IAApB,CAAyBC,KAApD,GAA4D,sBAAnE;;;AAGF,SAAS4E,oBAAT,CAA8B,EAAC9D,YAAD,EAA9B,EAA8C;SACrCC,qBAAA,CAAsB,OAAtB,EAA+B,CACpCA,oBAAA,CAAqBD,YAArB,EAAmCC,kBAAA,CAAmB,EAAnB,CAAnC,CADoC,CAA/B,CAAP;;;AAKF,SAAS8D,oCAAT,CAA8CjE,aAA9C,EAA6D,EAACE,YAAD,EAA7D,EAA6E;SACpEC,qBAAA,CACLA,sBAAA,CACE,GADF,EAEEA,kBAAA,CACED,YADF,EAEEC,YAAA,CAAaH,aAAb,CAFF,CAFF,EAMEG,kBAAA,CAAmB,EAAnB,CANF,CADK,CAAP;;;AAYF,SAAS+D,2BAAT,CAAqClE,aAArC,EAAoD8C,WAApD,EAAiExC,MAAjE,EAAyE;SAChEH,qBAAA,CACLA,sBAAA,CACE,GADF,EAEEA,kBAAA,CACEA,kBAAA,CACEG,OAAOJ,YADT,EAEEC,YAAA,CAAaH,aAAb,CAFF,CADF,EAKEG,YAAA,CAAa2C,YAAY7C,QAAZ,CAAqBd,IAArB,CAA0BC,KAAvC,CALF,CAFF,EASEsE,8BAA8BZ,WAA9B,EAA2CxC,MAA3C,CATF,CADK,CAAP;;;AAeF,AAAe,SAAS6D,gBAAT,CAA0BC,UAA1B,EAAsC9D,MAAtC,EAA8C;QACrD+D,0BAA0BD,WAC7B7E,WAD6B,CAE7BC,MAF6B,CAEtBqE,qBAFsB,EAG7BrE,MAH6B,CAGtBsE,YAHsB,CAAhC;;MAKI,CAACO,wBAAwBzC,MAA7B,EAAqC;WAC5B,EAAP;;;SAGK,CACLoC,qBAAqB1D,MAArB,CADK,EAEL,GACE+D,wBACG1D,GADH,CACQwC,mBAAD,IAAyB;UACtBnD,gBAAgB+D,kBAAkBZ,mBAAlB,CAAtB;;WAEO,CACLc,qCAAqCjE,aAArC,EAAoDM,MAApD,CADK,EAEL,GACE6C,oBAAoBN,mBAApB,CAAwClC,GAAxC,CAA6CmC,WAAD,IAAiB;aACpDoB,4BAA4BlE,aAA5B,EAA2C8C,WAA3C,EAAwDxC,MAAxD,CAAP;KADF,CAHG,CAAP;GAJJ,EAaGgE,MAbH,CAaU,CAACC,GAAD,EAAMC,mBAAN,KAA8B;WAC7BD,IAAIzE,MAAJ,CAAW0E,mBAAX,CAAP;GAdJ,EAeK,EAfL,CAHG,CAAP;;;ACrDF,SAASC,yBAAT,CAAmClF,WAAnC,EAAgD;SACvCA,YAAYC,MAAZ,CAAoBC,UAAD,IAAgBA,WAAWC,IAAX,KAAoB,oBAAvD,CAAP;;;AAGF,SAASgF,uBAAT,CAAiCC,KAAjC,EAAwCC,aAAxC,EAAoD;QAC5CvF,IAAN,CAAWc,qBAAA,CAAsB,OAAtB,EAA+B,CACxCA,oBAAA,CAAqByE,aAArB,EAAiCzE,kBAAA,CAAmB,EAAnB,CAAjC,CADwC,CAA/B,CAAX;;;AAKF,SAAS0E,eAAT,CAAyBF,KAAzB,EAAgC,EAAChC,WAAD,EAAcpC,SAAd,EAAhC,EAA0D;QAClDlB,IAAN,CAAWc,qBAAA,CAAsB,OAAtB,EAA+B,CACxCA,oBAAA,CAAqBwC,WAArB,EACExC,gBAAA,CACEA,kBAAA,CAAmBI,SAAnB,EAA8BJ,YAAA,CAAa,UAAb,CAA9B,CADF,EAEE,EAFF,CADF,CADwC,CAA/B,CAAX;;;AAUF,AAAe,SAAS2E,eAAT,CAAyBC,UAAzB,EAAqCzE,MAArC,EAA6C;QACpD0E,iBAAiB,EAAvB;;kBAEgBA,cAAhB,EAAgC1E,MAAhC;;QAEM2E,mBAAmBC,OAAOC,MAAP,CACvB,EADuB,EAEvBJ,UAFuB,EAGvB,EAACxF,aAAaD,gBAAgByF,WAAWxF,WAA3B,CAAd,EAHuB,CAAzB;QAKM6F,qBAAqBX,0BAA0BQ,iBAAiB1F,WAA3C,CAA3B;;MAEI6F,mBAAmBxD,MAAvB,EAA+B;4BACLoD,cAAxB,EAAwC1E,OAAOe,UAA/C;;;iBAGahC,IAAf,CAAoB,GAAG8E,iBAAiBY,UAAjB,EAA6BzE,MAA7B,CAAvB;;yBAEM2E,gBAAN,EAAwB;wBACF3C,gBAAgB0C,cAAhB,EAAgC1E,MAAhC,CADE;yBAEDgD,iBAAiB0B,cAAjB,EAAiC1E,MAAjC;GAFvB;;SAKO0E,cAAP;;;AC9CF,MAAMK,WAAW;aACJ,QADI;eAEF,UAFE;cAGH,SAHG;gBAID;CAJhB;;AAOA,AAAO,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;cAC9B,QAD8B;gBAE5B,UAF4B;eAG7B,SAH6B;iBAI3B;IACbF,QALG,EAKO;QACNN,aAAaS,uBAAMD,WAAN,CAAnB;QACME,OAAO;eACAtF,YAAA,CAAaI,SAAb,CADA;iBAEEJ,YAAA,CAAawC,WAAb,CAFF;gBAGCxC,YAAA,CAAakB,UAAb,CAHD;kBAIGlB,YAAA,CAAaD,YAAb;GAJhB;;SAOO4E,gBAAgBC,UAAhB,EAA4BU,IAA5B,CAAP;;;AAGF,AAAe,SAASC,eAAT,CAAyBH,WAAzB,EAAsC;cACvC,QADuC;gBAErC,UAFqC;eAGtC,SAHsC;iBAIpC;IACbF,QALW,EAKD;QACNM,QAAQL,eAAeC,WAAf,EAA4B;aAAA;eAAA;cAAA;;GAA5B,CAAd;;SAOQ,GAAEK,SAASzF,SAAA,CAAUwF,KAAV,CAAT,EAA2BE,IAAK,IAA1C;;;;;;;;;;;;;;"}